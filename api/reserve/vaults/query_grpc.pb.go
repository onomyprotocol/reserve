// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: reserve/vaults/query.proto

package vaults

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                            = "/reserve.vaults.Query/Params"
	Query_QueryAllCollateral_FullMethodName                = "/reserve.vaults.Query/QueryAllCollateral"
	Query_QueryCollateralsByDenom_FullMethodName           = "/reserve.vaults.Query/QueryCollateralsByDenom"
	Query_QueryCollateralsByMintDenom_FullMethodName       = "/reserve.vaults.Query/QueryCollateralsByMintDenom"
	Query_QueryCollateralsByDenomMintDenom_FullMethodName  = "/reserve.vaults.Query/QueryCollateralsByDenomMintDenom"
	Query_QueryAllVaults_FullMethodName                    = "/reserve.vaults.Query/QueryAllVaults"
	Query_QueryVaultsByID_FullMethodName                   = "/reserve.vaults.Query/QueryVaultsByID"
	Query_QueryVaultByOwner_FullMethodName                 = "/reserve.vaults.Query/QueryVaultByOwner"
	Query_QueryTotalCollateralLockedByDenom_FullMethodName = "/reserve.vaults.Query/QueryTotalCollateralLockedByDenom"
	Query_QueryShortfallAmount_FullMethodName              = "/reserve.vaults.Query/QueryShortfallAmount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryAllCollateral(ctx context.Context, in *QueryAllCollateralRequest, opts ...grpc.CallOption) (*QueryAllCollateralResponse, error)
	QueryCollateralsByDenom(ctx context.Context, in *QueryCollateralsByDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByDenomResponse, error)
	QueryCollateralsByMintDenom(ctx context.Context, in *QueryCollateralsByMintDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByMintDenomResponse, error)
	QueryCollateralsByDenomMintDenom(ctx context.Context, in *QueryCollateralsByDenomMintDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByDenomMintDenomResponse, error)
	QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	QueryVaultsByID(ctx context.Context, in *QueryVaultIdRequest, opts ...grpc.CallOption) (*QueryVaultIdResponse, error)
	QueryVaultByOwner(ctx context.Context, in *QueryVaultByOwnerRequest, opts ...grpc.CallOption) (*QueryVaultByOwnerResponse, error)
	QueryTotalCollateralLockedByDenom(ctx context.Context, in *QueryTotalCollateralLockedByDenomRequest, opts ...grpc.CallOption) (*QueryTotalCollateralLockedByDenomResponse, error)
	QueryShortfallAmount(ctx context.Context, in *QueryShortfallAmountRequest, opts ...grpc.CallOption) (*QueryShortfallAmountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllCollateral(ctx context.Context, in *QueryAllCollateralRequest, opts ...grpc.CallOption) (*QueryAllCollateralResponse, error) {
	out := new(QueryAllCollateralResponse)
	err := c.cc.Invoke(ctx, Query_QueryAllCollateral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollateralsByDenom(ctx context.Context, in *QueryCollateralsByDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByDenomResponse, error) {
	out := new(QueryCollateralsByDenomResponse)
	err := c.cc.Invoke(ctx, Query_QueryCollateralsByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollateralsByMintDenom(ctx context.Context, in *QueryCollateralsByMintDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByMintDenomResponse, error) {
	out := new(QueryCollateralsByMintDenomResponse)
	err := c.cc.Invoke(ctx, Query_QueryCollateralsByMintDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollateralsByDenomMintDenom(ctx context.Context, in *QueryCollateralsByDenomMintDenomRequest, opts ...grpc.CallOption) (*QueryCollateralsByDenomMintDenomResponse, error) {
	out := new(QueryCollateralsByDenomMintDenomResponse)
	err := c.cc.Invoke(ctx, Query_QueryCollateralsByDenomMintDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, Query_QueryAllVaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultsByID(ctx context.Context, in *QueryVaultIdRequest, opts ...grpc.CallOption) (*QueryVaultIdResponse, error) {
	out := new(QueryVaultIdResponse)
	err := c.cc.Invoke(ctx, Query_QueryVaultsByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultByOwner(ctx context.Context, in *QueryVaultByOwnerRequest, opts ...grpc.CallOption) (*QueryVaultByOwnerResponse, error) {
	out := new(QueryVaultByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_QueryVaultByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalCollateralLockedByDenom(ctx context.Context, in *QueryTotalCollateralLockedByDenomRequest, opts ...grpc.CallOption) (*QueryTotalCollateralLockedByDenomResponse, error) {
	out := new(QueryTotalCollateralLockedByDenomResponse)
	err := c.cc.Invoke(ctx, Query_QueryTotalCollateralLockedByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryShortfallAmount(ctx context.Context, in *QueryShortfallAmountRequest, opts ...grpc.CallOption) (*QueryShortfallAmountResponse, error) {
	out := new(QueryShortfallAmountResponse)
	err := c.cc.Invoke(ctx, Query_QueryShortfallAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryAllCollateral(context.Context, *QueryAllCollateralRequest) (*QueryAllCollateralResponse, error)
	QueryCollateralsByDenom(context.Context, *QueryCollateralsByDenomRequest) (*QueryCollateralsByDenomResponse, error)
	QueryCollateralsByMintDenom(context.Context, *QueryCollateralsByMintDenomRequest) (*QueryCollateralsByMintDenomResponse, error)
	QueryCollateralsByDenomMintDenom(context.Context, *QueryCollateralsByDenomMintDenomRequest) (*QueryCollateralsByDenomMintDenomResponse, error)
	QueryAllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	QueryVaultsByID(context.Context, *QueryVaultIdRequest) (*QueryVaultIdResponse, error)
	QueryVaultByOwner(context.Context, *QueryVaultByOwnerRequest) (*QueryVaultByOwnerResponse, error)
	QueryTotalCollateralLockedByDenom(context.Context, *QueryTotalCollateralLockedByDenomRequest) (*QueryTotalCollateralLockedByDenomResponse, error)
	QueryShortfallAmount(context.Context, *QueryShortfallAmountRequest) (*QueryShortfallAmountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) QueryAllCollateral(context.Context, *QueryAllCollateralRequest) (*QueryAllCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllCollateral not implemented")
}
func (UnimplementedQueryServer) QueryCollateralsByDenom(context.Context, *QueryCollateralsByDenomRequest) (*QueryCollateralsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollateralsByDenom not implemented")
}
func (UnimplementedQueryServer) QueryCollateralsByMintDenom(context.Context, *QueryCollateralsByMintDenomRequest) (*QueryCollateralsByMintDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollateralsByMintDenom not implemented")
}
func (UnimplementedQueryServer) QueryCollateralsByDenomMintDenom(context.Context, *QueryCollateralsByDenomMintDenomRequest) (*QueryCollateralsByDenomMintDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollateralsByDenomMintDenom not implemented")
}
func (UnimplementedQueryServer) QueryAllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaults not implemented")
}
func (UnimplementedQueryServer) QueryVaultsByID(context.Context, *QueryVaultIdRequest) (*QueryVaultIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultsByID not implemented")
}
func (UnimplementedQueryServer) QueryVaultByOwner(context.Context, *QueryVaultByOwnerRequest) (*QueryVaultByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultByOwner not implemented")
}
func (UnimplementedQueryServer) QueryTotalCollateralLockedByDenom(context.Context, *QueryTotalCollateralLockedByDenomRequest) (*QueryTotalCollateralLockedByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalCollateralLockedByDenom not implemented")
}
func (UnimplementedQueryServer) QueryShortfallAmount(context.Context, *QueryShortfallAmountRequest) (*QueryShortfallAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryShortfallAmount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryAllCollateral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllCollateral(ctx, req.(*QueryAllCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollateralsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollateralsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryCollateralsByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollateralsByDenom(ctx, req.(*QueryCollateralsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollateralsByMintDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralsByMintDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollateralsByMintDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryCollateralsByMintDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollateralsByMintDenom(ctx, req.(*QueryCollateralsByMintDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollateralsByDenomMintDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralsByDenomMintDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollateralsByDenomMintDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryCollateralsByDenomMintDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollateralsByDenomMintDenom(ctx, req.(*QueryCollateralsByDenomMintDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryAllVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVaultsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultsByID(ctx, req.(*QueryVaultIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVaultByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultByOwner(ctx, req.(*QueryVaultByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalCollateralLockedByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalCollateralLockedByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalCollateralLockedByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryTotalCollateralLockedByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalCollateralLockedByDenom(ctx, req.(*QueryTotalCollateralLockedByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryShortfallAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShortfallAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryShortfallAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryShortfallAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryShortfallAmount(ctx, req.(*QueryShortfallAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.vaults.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryAllCollateral",
			Handler:    _Query_QueryAllCollateral_Handler,
		},
		{
			MethodName: "QueryCollateralsByDenom",
			Handler:    _Query_QueryCollateralsByDenom_Handler,
		},
		{
			MethodName: "QueryCollateralsByMintDenom",
			Handler:    _Query_QueryCollateralsByMintDenom_Handler,
		},
		{
			MethodName: "QueryCollateralsByDenomMintDenom",
			Handler:    _Query_QueryCollateralsByDenomMintDenom_Handler,
		},
		{
			MethodName: "QueryAllVaults",
			Handler:    _Query_QueryAllVaults_Handler,
		},
		{
			MethodName: "QueryVaultsByID",
			Handler:    _Query_QueryVaultsByID_Handler,
		},
		{
			MethodName: "QueryVaultByOwner",
			Handler:    _Query_QueryVaultByOwner_Handler,
		},
		{
			MethodName: "QueryTotalCollateralLockedByDenom",
			Handler:    _Query_QueryTotalCollateralLockedByDenom_Handler,
		},
		{
			MethodName: "QueryShortfallAmount",
			Handler:    _Query_QueryShortfallAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserve/vaults/query.proto",
}
