// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oracle

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_EventBandAckSuccess            protoreflect.MessageDescriptor
	fd_EventBandAckSuccess_ack_result protoreflect.FieldDescriptor
	fd_EventBandAckSuccess_client_id  protoreflect.FieldDescriptor
)

func init() {
	file_reserve_oracle_events_proto_init()
	md_EventBandAckSuccess = File_reserve_oracle_events_proto.Messages().ByName("EventBandAckSuccess")
	fd_EventBandAckSuccess_ack_result = md_EventBandAckSuccess.Fields().ByName("ack_result")
	fd_EventBandAckSuccess_client_id = md_EventBandAckSuccess.Fields().ByName("client_id")
}

var _ protoreflect.Message = (*fastReflection_EventBandAckSuccess)(nil)

type fastReflection_EventBandAckSuccess EventBandAckSuccess

func (x *EventBandAckSuccess) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventBandAckSuccess)(x)
}

func (x *EventBandAckSuccess) slowProtoReflect() protoreflect.Message {
	mi := &file_reserve_oracle_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventBandAckSuccess_messageType fastReflection_EventBandAckSuccess_messageType
var _ protoreflect.MessageType = fastReflection_EventBandAckSuccess_messageType{}

type fastReflection_EventBandAckSuccess_messageType struct{}

func (x fastReflection_EventBandAckSuccess_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventBandAckSuccess)(nil)
}
func (x fastReflection_EventBandAckSuccess_messageType) New() protoreflect.Message {
	return new(fastReflection_EventBandAckSuccess)
}
func (x fastReflection_EventBandAckSuccess_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandAckSuccess
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventBandAckSuccess) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandAckSuccess
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventBandAckSuccess) Type() protoreflect.MessageType {
	return _fastReflection_EventBandAckSuccess_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventBandAckSuccess) New() protoreflect.Message {
	return new(fastReflection_EventBandAckSuccess)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventBandAckSuccess) Interface() protoreflect.ProtoMessage {
	return (*EventBandAckSuccess)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventBandAckSuccess) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AckResult != "" {
		value := protoreflect.ValueOfString(x.AckResult)
		if !f(fd_EventBandAckSuccess_ack_result, value) {
			return
		}
	}
	if x.ClientId != int64(0) {
		value := protoreflect.ValueOfInt64(x.ClientId)
		if !f(fd_EventBandAckSuccess_client_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventBandAckSuccess) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		return x.AckResult != ""
	case "reserve.oracle.EventBandAckSuccess.client_id":
		return x.ClientId != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckSuccess) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		x.AckResult = ""
	case "reserve.oracle.EventBandAckSuccess.client_id":
		x.ClientId = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventBandAckSuccess) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		value := x.AckResult
		return protoreflect.ValueOfString(value)
	case "reserve.oracle.EventBandAckSuccess.client_id":
		value := x.ClientId
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckSuccess) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		x.AckResult = value.Interface().(string)
	case "reserve.oracle.EventBandAckSuccess.client_id":
		x.ClientId = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckSuccess) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		panic(fmt.Errorf("field ack_result of message reserve.oracle.EventBandAckSuccess is not mutable"))
	case "reserve.oracle.EventBandAckSuccess.client_id":
		panic(fmt.Errorf("field client_id of message reserve.oracle.EventBandAckSuccess is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventBandAckSuccess) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckSuccess.ack_result":
		return protoreflect.ValueOfString("")
	case "reserve.oracle.EventBandAckSuccess.client_id":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckSuccess"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckSuccess does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventBandAckSuccess) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in reserve.oracle.EventBandAckSuccess", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventBandAckSuccess) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckSuccess) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventBandAckSuccess) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventBandAckSuccess) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventBandAckSuccess)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AckResult)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ClientId != 0 {
			n += 1 + runtime.Sov(uint64(x.ClientId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventBandAckSuccess)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClientId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClientId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AckResult) > 0 {
			i -= len(x.AckResult)
			copy(dAtA[i:], x.AckResult)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AckResult)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventBandAckSuccess)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandAckSuccess: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandAckSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AckResult", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AckResult = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				x.ClientId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClientId |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventBandAckError           protoreflect.MessageDescriptor
	fd_EventBandAckError_ack_error protoreflect.FieldDescriptor
	fd_EventBandAckError_client_id protoreflect.FieldDescriptor
)

func init() {
	file_reserve_oracle_events_proto_init()
	md_EventBandAckError = File_reserve_oracle_events_proto.Messages().ByName("EventBandAckError")
	fd_EventBandAckError_ack_error = md_EventBandAckError.Fields().ByName("ack_error")
	fd_EventBandAckError_client_id = md_EventBandAckError.Fields().ByName("client_id")
}

var _ protoreflect.Message = (*fastReflection_EventBandAckError)(nil)

type fastReflection_EventBandAckError EventBandAckError

func (x *EventBandAckError) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventBandAckError)(x)
}

func (x *EventBandAckError) slowProtoReflect() protoreflect.Message {
	mi := &file_reserve_oracle_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventBandAckError_messageType fastReflection_EventBandAckError_messageType
var _ protoreflect.MessageType = fastReflection_EventBandAckError_messageType{}

type fastReflection_EventBandAckError_messageType struct{}

func (x fastReflection_EventBandAckError_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventBandAckError)(nil)
}
func (x fastReflection_EventBandAckError_messageType) New() protoreflect.Message {
	return new(fastReflection_EventBandAckError)
}
func (x fastReflection_EventBandAckError_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandAckError
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventBandAckError) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandAckError
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventBandAckError) Type() protoreflect.MessageType {
	return _fastReflection_EventBandAckError_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventBandAckError) New() protoreflect.Message {
	return new(fastReflection_EventBandAckError)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventBandAckError) Interface() protoreflect.ProtoMessage {
	return (*EventBandAckError)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventBandAckError) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AckError != "" {
		value := protoreflect.ValueOfString(x.AckError)
		if !f(fd_EventBandAckError_ack_error, value) {
			return
		}
	}
	if x.ClientId != int64(0) {
		value := protoreflect.ValueOfInt64(x.ClientId)
		if !f(fd_EventBandAckError_client_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventBandAckError) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		return x.AckError != ""
	case "reserve.oracle.EventBandAckError.client_id":
		return x.ClientId != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckError) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		x.AckError = ""
	case "reserve.oracle.EventBandAckError.client_id":
		x.ClientId = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventBandAckError) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		value := x.AckError
		return protoreflect.ValueOfString(value)
	case "reserve.oracle.EventBandAckError.client_id":
		value := x.ClientId
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckError) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		x.AckError = value.Interface().(string)
	case "reserve.oracle.EventBandAckError.client_id":
		x.ClientId = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckError) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		panic(fmt.Errorf("field ack_error of message reserve.oracle.EventBandAckError is not mutable"))
	case "reserve.oracle.EventBandAckError.client_id":
		panic(fmt.Errorf("field client_id of message reserve.oracle.EventBandAckError is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventBandAckError) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandAckError.ack_error":
		return protoreflect.ValueOfString("")
	case "reserve.oracle.EventBandAckError.client_id":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandAckError"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandAckError does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventBandAckError) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in reserve.oracle.EventBandAckError", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventBandAckError) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandAckError) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventBandAckError) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventBandAckError) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventBandAckError)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AckError)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ClientId != 0 {
			n += 1 + runtime.Sov(uint64(x.ClientId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventBandAckError)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClientId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClientId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AckError) > 0 {
			i -= len(x.AckError)
			copy(dAtA[i:], x.AckError)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AckError)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventBandAckError)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandAckError: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandAckError: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AckError", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AckError = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				x.ClientId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClientId |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventBandResponseTimeout           protoreflect.MessageDescriptor
	fd_EventBandResponseTimeout_client_id protoreflect.FieldDescriptor
)

func init() {
	file_reserve_oracle_events_proto_init()
	md_EventBandResponseTimeout = File_reserve_oracle_events_proto.Messages().ByName("EventBandResponseTimeout")
	fd_EventBandResponseTimeout_client_id = md_EventBandResponseTimeout.Fields().ByName("client_id")
}

var _ protoreflect.Message = (*fastReflection_EventBandResponseTimeout)(nil)

type fastReflection_EventBandResponseTimeout EventBandResponseTimeout

func (x *EventBandResponseTimeout) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventBandResponseTimeout)(x)
}

func (x *EventBandResponseTimeout) slowProtoReflect() protoreflect.Message {
	mi := &file_reserve_oracle_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventBandResponseTimeout_messageType fastReflection_EventBandResponseTimeout_messageType
var _ protoreflect.MessageType = fastReflection_EventBandResponseTimeout_messageType{}

type fastReflection_EventBandResponseTimeout_messageType struct{}

func (x fastReflection_EventBandResponseTimeout_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventBandResponseTimeout)(nil)
}
func (x fastReflection_EventBandResponseTimeout_messageType) New() protoreflect.Message {
	return new(fastReflection_EventBandResponseTimeout)
}
func (x fastReflection_EventBandResponseTimeout_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandResponseTimeout
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventBandResponseTimeout) Descriptor() protoreflect.MessageDescriptor {
	return md_EventBandResponseTimeout
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventBandResponseTimeout) Type() protoreflect.MessageType {
	return _fastReflection_EventBandResponseTimeout_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventBandResponseTimeout) New() protoreflect.Message {
	return new(fastReflection_EventBandResponseTimeout)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventBandResponseTimeout) Interface() protoreflect.ProtoMessage {
	return (*EventBandResponseTimeout)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventBandResponseTimeout) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ClientId != int64(0) {
		value := protoreflect.ValueOfInt64(x.ClientId)
		if !f(fd_EventBandResponseTimeout_client_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventBandResponseTimeout) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		return x.ClientId != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandResponseTimeout) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		x.ClientId = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventBandResponseTimeout) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		value := x.ClientId
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandResponseTimeout) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		x.ClientId = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandResponseTimeout) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		panic(fmt.Errorf("field client_id of message reserve.oracle.EventBandResponseTimeout is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventBandResponseTimeout) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.EventBandResponseTimeout.client_id":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.EventBandResponseTimeout"))
		}
		panic(fmt.Errorf("message reserve.oracle.EventBandResponseTimeout does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventBandResponseTimeout) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in reserve.oracle.EventBandResponseTimeout", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventBandResponseTimeout) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventBandResponseTimeout) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventBandResponseTimeout) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventBandResponseTimeout) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventBandResponseTimeout)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ClientId != 0 {
			n += 1 + runtime.Sov(uint64(x.ClientId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventBandResponseTimeout)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClientId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClientId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventBandResponseTimeout)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandResponseTimeout: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventBandResponseTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				x.ClientId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClientId |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SetBandPriceEvent_2_list)(nil)

type _SetBandPriceEvent_2_list struct {
	list *[]string
}

func (x *_SetBandPriceEvent_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SetBandPriceEvent_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_SetBandPriceEvent_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SetBandPriceEvent_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SetBandPriceEvent_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SetBandPriceEvent at list field Symbols as it is not of Message kind"))
}

func (x *_SetBandPriceEvent_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SetBandPriceEvent_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_SetBandPriceEvent_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SetBandPriceEvent_3_list)(nil)

type _SetBandPriceEvent_3_list struct {
	list *[]string
}

func (x *_SetBandPriceEvent_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SetBandPriceEvent_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_SetBandPriceEvent_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SetBandPriceEvent_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SetBandPriceEvent_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SetBandPriceEvent at list field Prices as it is not of Message kind"))
}

func (x *_SetBandPriceEvent_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SetBandPriceEvent_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_SetBandPriceEvent_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SetBandPriceEvent              protoreflect.MessageDescriptor
	fd_SetBandPriceEvent_relayer      protoreflect.FieldDescriptor
	fd_SetBandPriceEvent_symbols      protoreflect.FieldDescriptor
	fd_SetBandPriceEvent_prices       protoreflect.FieldDescriptor
	fd_SetBandPriceEvent_resolve_time protoreflect.FieldDescriptor
	fd_SetBandPriceEvent_request_id   protoreflect.FieldDescriptor
	fd_SetBandPriceEvent_client_id    protoreflect.FieldDescriptor
)

func init() {
	file_reserve_oracle_events_proto_init()
	md_SetBandPriceEvent = File_reserve_oracle_events_proto.Messages().ByName("SetBandPriceEvent")
	fd_SetBandPriceEvent_relayer = md_SetBandPriceEvent.Fields().ByName("relayer")
	fd_SetBandPriceEvent_symbols = md_SetBandPriceEvent.Fields().ByName("symbols")
	fd_SetBandPriceEvent_prices = md_SetBandPriceEvent.Fields().ByName("prices")
	fd_SetBandPriceEvent_resolve_time = md_SetBandPriceEvent.Fields().ByName("resolve_time")
	fd_SetBandPriceEvent_request_id = md_SetBandPriceEvent.Fields().ByName("request_id")
	fd_SetBandPriceEvent_client_id = md_SetBandPriceEvent.Fields().ByName("client_id")
}

var _ protoreflect.Message = (*fastReflection_SetBandPriceEvent)(nil)

type fastReflection_SetBandPriceEvent SetBandPriceEvent

func (x *SetBandPriceEvent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SetBandPriceEvent)(x)
}

func (x *SetBandPriceEvent) slowProtoReflect() protoreflect.Message {
	mi := &file_reserve_oracle_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SetBandPriceEvent_messageType fastReflection_SetBandPriceEvent_messageType
var _ protoreflect.MessageType = fastReflection_SetBandPriceEvent_messageType{}

type fastReflection_SetBandPriceEvent_messageType struct{}

func (x fastReflection_SetBandPriceEvent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SetBandPriceEvent)(nil)
}
func (x fastReflection_SetBandPriceEvent_messageType) New() protoreflect.Message {
	return new(fastReflection_SetBandPriceEvent)
}
func (x fastReflection_SetBandPriceEvent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SetBandPriceEvent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SetBandPriceEvent) Descriptor() protoreflect.MessageDescriptor {
	return md_SetBandPriceEvent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SetBandPriceEvent) Type() protoreflect.MessageType {
	return _fastReflection_SetBandPriceEvent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SetBandPriceEvent) New() protoreflect.Message {
	return new(fastReflection_SetBandPriceEvent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SetBandPriceEvent) Interface() protoreflect.ProtoMessage {
	return (*SetBandPriceEvent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SetBandPriceEvent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Relayer != "" {
		value := protoreflect.ValueOfString(x.Relayer)
		if !f(fd_SetBandPriceEvent_relayer, value) {
			return
		}
	}
	if len(x.Symbols) != 0 {
		value := protoreflect.ValueOfList(&_SetBandPriceEvent_2_list{list: &x.Symbols})
		if !f(fd_SetBandPriceEvent_symbols, value) {
			return
		}
	}
	if len(x.Prices) != 0 {
		value := protoreflect.ValueOfList(&_SetBandPriceEvent_3_list{list: &x.Prices})
		if !f(fd_SetBandPriceEvent_prices, value) {
			return
		}
	}
	if x.ResolveTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ResolveTime)
		if !f(fd_SetBandPriceEvent_resolve_time, value) {
			return
		}
	}
	if x.RequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestId)
		if !f(fd_SetBandPriceEvent_request_id, value) {
			return
		}
	}
	if x.ClientId != int64(0) {
		value := protoreflect.ValueOfInt64(x.ClientId)
		if !f(fd_SetBandPriceEvent_client_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SetBandPriceEvent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "reserve.oracle.SetBandPriceEvent.relayer":
		return x.Relayer != ""
	case "reserve.oracle.SetBandPriceEvent.symbols":
		return len(x.Symbols) != 0
	case "reserve.oracle.SetBandPriceEvent.prices":
		return len(x.Prices) != 0
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		return x.ResolveTime != uint64(0)
	case "reserve.oracle.SetBandPriceEvent.request_id":
		return x.RequestId != uint64(0)
	case "reserve.oracle.SetBandPriceEvent.client_id":
		return x.ClientId != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SetBandPriceEvent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "reserve.oracle.SetBandPriceEvent.relayer":
		x.Relayer = ""
	case "reserve.oracle.SetBandPriceEvent.symbols":
		x.Symbols = nil
	case "reserve.oracle.SetBandPriceEvent.prices":
		x.Prices = nil
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		x.ResolveTime = uint64(0)
	case "reserve.oracle.SetBandPriceEvent.request_id":
		x.RequestId = uint64(0)
	case "reserve.oracle.SetBandPriceEvent.client_id":
		x.ClientId = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SetBandPriceEvent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "reserve.oracle.SetBandPriceEvent.relayer":
		value := x.Relayer
		return protoreflect.ValueOfString(value)
	case "reserve.oracle.SetBandPriceEvent.symbols":
		if len(x.Symbols) == 0 {
			return protoreflect.ValueOfList(&_SetBandPriceEvent_2_list{})
		}
		listValue := &_SetBandPriceEvent_2_list{list: &x.Symbols}
		return protoreflect.ValueOfList(listValue)
	case "reserve.oracle.SetBandPriceEvent.prices":
		if len(x.Prices) == 0 {
			return protoreflect.ValueOfList(&_SetBandPriceEvent_3_list{})
		}
		listValue := &_SetBandPriceEvent_3_list{list: &x.Prices}
		return protoreflect.ValueOfList(listValue)
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		value := x.ResolveTime
		return protoreflect.ValueOfUint64(value)
	case "reserve.oracle.SetBandPriceEvent.request_id":
		value := x.RequestId
		return protoreflect.ValueOfUint64(value)
	case "reserve.oracle.SetBandPriceEvent.client_id":
		value := x.ClientId
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SetBandPriceEvent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "reserve.oracle.SetBandPriceEvent.relayer":
		x.Relayer = value.Interface().(string)
	case "reserve.oracle.SetBandPriceEvent.symbols":
		lv := value.List()
		clv := lv.(*_SetBandPriceEvent_2_list)
		x.Symbols = *clv.list
	case "reserve.oracle.SetBandPriceEvent.prices":
		lv := value.List()
		clv := lv.(*_SetBandPriceEvent_3_list)
		x.Prices = *clv.list
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		x.ResolveTime = value.Uint()
	case "reserve.oracle.SetBandPriceEvent.request_id":
		x.RequestId = value.Uint()
	case "reserve.oracle.SetBandPriceEvent.client_id":
		x.ClientId = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SetBandPriceEvent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.SetBandPriceEvent.symbols":
		if x.Symbols == nil {
			x.Symbols = []string{}
		}
		value := &_SetBandPriceEvent_2_list{list: &x.Symbols}
		return protoreflect.ValueOfList(value)
	case "reserve.oracle.SetBandPriceEvent.prices":
		if x.Prices == nil {
			x.Prices = []string{}
		}
		value := &_SetBandPriceEvent_3_list{list: &x.Prices}
		return protoreflect.ValueOfList(value)
	case "reserve.oracle.SetBandPriceEvent.relayer":
		panic(fmt.Errorf("field relayer of message reserve.oracle.SetBandPriceEvent is not mutable"))
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		panic(fmt.Errorf("field resolve_time of message reserve.oracle.SetBandPriceEvent is not mutable"))
	case "reserve.oracle.SetBandPriceEvent.request_id":
		panic(fmt.Errorf("field request_id of message reserve.oracle.SetBandPriceEvent is not mutable"))
	case "reserve.oracle.SetBandPriceEvent.client_id":
		panic(fmt.Errorf("field client_id of message reserve.oracle.SetBandPriceEvent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SetBandPriceEvent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "reserve.oracle.SetBandPriceEvent.relayer":
		return protoreflect.ValueOfString("")
	case "reserve.oracle.SetBandPriceEvent.symbols":
		list := []string{}
		return protoreflect.ValueOfList(&_SetBandPriceEvent_2_list{list: &list})
	case "reserve.oracle.SetBandPriceEvent.prices":
		list := []string{}
		return protoreflect.ValueOfList(&_SetBandPriceEvent_3_list{list: &list})
	case "reserve.oracle.SetBandPriceEvent.resolve_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "reserve.oracle.SetBandPriceEvent.request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "reserve.oracle.SetBandPriceEvent.client_id":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: reserve.oracle.SetBandPriceEvent"))
		}
		panic(fmt.Errorf("message reserve.oracle.SetBandPriceEvent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SetBandPriceEvent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in reserve.oracle.SetBandPriceEvent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SetBandPriceEvent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SetBandPriceEvent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SetBandPriceEvent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SetBandPriceEvent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SetBandPriceEvent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Relayer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Symbols) > 0 {
			for _, s := range x.Symbols {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Prices) > 0 {
			for _, s := range x.Prices {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ResolveTime != 0 {
			n += 1 + runtime.Sov(uint64(x.ResolveTime))
		}
		if x.RequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestId))
		}
		if x.ClientId != 0 {
			n += 1 + runtime.Sov(uint64(x.ClientId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SetBandPriceEvent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClientId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClientId))
			i--
			dAtA[i] = 0x30
		}
		if x.RequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestId))
			i--
			dAtA[i] = 0x28
		}
		if x.ResolveTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ResolveTime))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Prices) > 0 {
			for iNdEx := len(x.Prices) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Prices[iNdEx])
				copy(dAtA[i:], x.Prices[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Prices[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Symbols) > 0 {
			for iNdEx := len(x.Symbols) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Symbols[iNdEx])
				copy(dAtA[i:], x.Symbols[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Symbols[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Relayer) > 0 {
			i -= len(x.Relayer)
			copy(dAtA[i:], x.Relayer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Relayer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SetBandPriceEvent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SetBandPriceEvent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SetBandPriceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Relayer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Symbols = append(x.Symbols, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Prices = append(x.Prices, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
				}
				x.ResolveTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ResolveTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				x.RequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				x.ClientId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClientId |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: reserve/oracle/events.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventBandAckSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckResult string `protobuf:"bytes,1,opt,name=ack_result,json=ackResult,proto3" json:"ack_result,omitempty"`
	ClientId  int64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *EventBandAckSuccess) Reset() {
	*x = EventBandAckSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reserve_oracle_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBandAckSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBandAckSuccess) ProtoMessage() {}

// Deprecated: Use EventBandAckSuccess.ProtoReflect.Descriptor instead.
func (*EventBandAckSuccess) Descriptor() ([]byte, []int) {
	return file_reserve_oracle_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventBandAckSuccess) GetAckResult() string {
	if x != nil {
		return x.AckResult
	}
	return ""
}

func (x *EventBandAckSuccess) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type EventBandAckError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckError string `protobuf:"bytes,1,opt,name=ack_error,json=ackError,proto3" json:"ack_error,omitempty"`
	ClientId int64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *EventBandAckError) Reset() {
	*x = EventBandAckError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reserve_oracle_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBandAckError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBandAckError) ProtoMessage() {}

// Deprecated: Use EventBandAckError.ProtoReflect.Descriptor instead.
func (*EventBandAckError) Descriptor() ([]byte, []int) {
	return file_reserve_oracle_events_proto_rawDescGZIP(), []int{1}
}

func (x *EventBandAckError) GetAckError() string {
	if x != nil {
		return x.AckError
	}
	return ""
}

func (x *EventBandAckError) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type EventBandResponseTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *EventBandResponseTimeout) Reset() {
	*x = EventBandResponseTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reserve_oracle_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBandResponseTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBandResponseTimeout) ProtoMessage() {}

// Deprecated: Use EventBandResponseTimeout.ProtoReflect.Descriptor instead.
func (*EventBandResponseTimeout) Descriptor() ([]byte, []int) {
	return file_reserve_oracle_events_proto_rawDescGZIP(), []int{2}
}

func (x *EventBandResponseTimeout) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type SetBandPriceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relayer     string   `protobuf:"bytes,1,opt,name=relayer,proto3" json:"relayer,omitempty"`
	Symbols     []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Prices      []string `protobuf:"bytes,3,rep,name=prices,proto3" json:"prices,omitempty"`
	ResolveTime uint64   `protobuf:"varint,4,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	RequestId   uint64   `protobuf:"varint,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ClientId    int64    `protobuf:"varint,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *SetBandPriceEvent) Reset() {
	*x = SetBandPriceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reserve_oracle_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBandPriceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBandPriceEvent) ProtoMessage() {}

// Deprecated: Use SetBandPriceEvent.ProtoReflect.Descriptor instead.
func (*SetBandPriceEvent) Descriptor() ([]byte, []int) {
	return file_reserve_oracle_events_proto_rawDescGZIP(), []int{3}
}

func (x *SetBandPriceEvent) GetRelayer() string {
	if x != nil {
		return x.Relayer
	}
	return ""
}

func (x *SetBandPriceEvent) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *SetBandPriceEvent) GetPrices() []string {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *SetBandPriceEvent) GetResolveTime() uint64 {
	if x != nil {
		return x.ResolveTime
	}
	return 0
}

func (x *SetBandPriceEvent) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SetBandPriceEvent) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

var File_reserve_oracle_events_proto protoreflect.FileDescriptor

var file_reserve_oracle_events_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x64,
	0x41, 0x63, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe3,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x9b, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0xa2, 0x02, 0x03, 0x52, 0x4f,
	0x58, 0xaa, 0x02, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0xca, 0x02, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5c, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0xe2, 0x02, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5c, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reserve_oracle_events_proto_rawDescOnce sync.Once
	file_reserve_oracle_events_proto_rawDescData = file_reserve_oracle_events_proto_rawDesc
)

func file_reserve_oracle_events_proto_rawDescGZIP() []byte {
	file_reserve_oracle_events_proto_rawDescOnce.Do(func() {
		file_reserve_oracle_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_reserve_oracle_events_proto_rawDescData)
	})
	return file_reserve_oracle_events_proto_rawDescData
}

var file_reserve_oracle_events_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_reserve_oracle_events_proto_goTypes = []interface{}{
	(*EventBandAckSuccess)(nil),      // 0: reserve.oracle.EventBandAckSuccess
	(*EventBandAckError)(nil),        // 1: reserve.oracle.EventBandAckError
	(*EventBandResponseTimeout)(nil), // 2: reserve.oracle.EventBandResponseTimeout
	(*SetBandPriceEvent)(nil),        // 3: reserve.oracle.SetBandPriceEvent
}
var file_reserve_oracle_events_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_reserve_oracle_events_proto_init() }
func file_reserve_oracle_events_proto_init() {
	if File_reserve_oracle_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_reserve_oracle_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBandAckSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reserve_oracle_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBandAckError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reserve_oracle_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBandResponseTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reserve_oracle_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBandPriceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reserve_oracle_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_reserve_oracle_events_proto_goTypes,
		DependencyIndexes: file_reserve_oracle_events_proto_depIdxs,
		MessageInfos:      file_reserve_oracle_events_proto_msgTypes,
	}.Build()
	File_reserve_oracle_events_proto = out.File
	file_reserve_oracle_events_proto_rawDesc = nil
	file_reserve_oracle_events_proto_goTypes = nil
	file_reserve_oracle_events_proto_depIdxs = nil
}
