// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: reserve/oracle/query.proto

package oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                     = "/reserve.oracle.Query/Params"
	Query_BandPriceStates_FullMethodName            = "/reserve.oracle.Query/BandPriceStates"
	Query_Price_FullMethodName                      = "/reserve.oracle.Query/Price"
	Query_BandParams_FullMethodName                 = "/reserve.oracle.Query/BandParams"
	Query_BandOracleRequestParams_FullMethodName    = "/reserve.oracle.Query/BandOracleRequestParams"
	Query_BandOracleRequest_FullMethodName          = "/reserve.oracle.Query/BandOracleRequest"
	Query_QueryOracleScriptIdByDenom_FullMethodName = "/reserve.oracle.Query/QueryOracleScriptIdByDenom"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error)
	// Retrieves the price of base/quote
	Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error)
	// Retrieves the band paraparametersms
	BandParams(ctx context.Context, in *QueryBandParamsRequest, opts ...grpc.CallOption) (*QueryBandParamsResponse, error)
	// Retrieves the band oracle request parameters
	BandOracleRequestParams(ctx context.Context, in *QueryBandOracleRequestParamsRequest, opts ...grpc.CallOption) (*QueryBandOracleRequestParamsResponse, error)
	// Retrieves the band oracle request parameters
	BandOracleRequest(ctx context.Context, in *QueryBandOracleRequestRequest, opts ...grpc.CallOption) (*QueryBandOracleRequestResponse, error)
	QueryOracleScriptIdByDenom(ctx context.Context, in *QueryOracleScriptIdByDenomRequest, opts ...grpc.CallOption) (*QueryOracleScriptIdByDenomResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error) {
	out := new(QueryBandPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_BandPriceStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error) {
	out := new(QueryPriceResponse)
	err := c.cc.Invoke(ctx, Query_Price_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandParams(ctx context.Context, in *QueryBandParamsRequest, opts ...grpc.CallOption) (*QueryBandParamsResponse, error) {
	out := new(QueryBandParamsResponse)
	err := c.cc.Invoke(ctx, Query_BandParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandOracleRequestParams(ctx context.Context, in *QueryBandOracleRequestParamsRequest, opts ...grpc.CallOption) (*QueryBandOracleRequestParamsResponse, error) {
	out := new(QueryBandOracleRequestParamsResponse)
	err := c.cc.Invoke(ctx, Query_BandOracleRequestParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandOracleRequest(ctx context.Context, in *QueryBandOracleRequestRequest, opts ...grpc.CallOption) (*QueryBandOracleRequestResponse, error) {
	out := new(QueryBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, Query_BandOracleRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOracleScriptIdByDenom(ctx context.Context, in *QueryOracleScriptIdByDenomRequest, opts ...grpc.CallOption) (*QueryOracleScriptIdByDenomResponse, error) {
	out := new(QueryOracleScriptIdByDenomResponse)
	err := c.cc.Invoke(ctx, Query_QueryOracleScriptIdByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(context.Context, *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error)
	// Retrieves the price of base/quote
	Price(context.Context, *QueryPriceRequest) (*QueryPriceResponse, error)
	// Retrieves the band paraparametersms
	BandParams(context.Context, *QueryBandParamsRequest) (*QueryBandParamsResponse, error)
	// Retrieves the band oracle request parameters
	BandOracleRequestParams(context.Context, *QueryBandOracleRequestParamsRequest) (*QueryBandOracleRequestParamsResponse, error)
	// Retrieves the band oracle request parameters
	BandOracleRequest(context.Context, *QueryBandOracleRequestRequest) (*QueryBandOracleRequestResponse, error)
	QueryOracleScriptIdByDenom(context.Context, *QueryOracleScriptIdByDenomRequest) (*QueryOracleScriptIdByDenomResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) BandPriceStates(context.Context, *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandPriceStates not implemented")
}
func (UnimplementedQueryServer) Price(context.Context, *QueryPriceRequest) (*QueryPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (UnimplementedQueryServer) BandParams(context.Context, *QueryBandParamsRequest) (*QueryBandParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandParams not implemented")
}
func (UnimplementedQueryServer) BandOracleRequestParams(context.Context, *QueryBandOracleRequestParamsRequest) (*QueryBandOracleRequestParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandOracleRequestParams not implemented")
}
func (UnimplementedQueryServer) BandOracleRequest(context.Context, *QueryBandOracleRequestRequest) (*QueryBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandOracleRequest not implemented")
}
func (UnimplementedQueryServer) QueryOracleScriptIdByDenom(context.Context, *QueryOracleScriptIdByDenomRequest) (*QueryOracleScriptIdByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleScriptIdByDenom not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandPriceStates(ctx, req.(*QueryBandPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Price_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandParams(ctx, req.(*QueryBandParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandOracleRequestParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandOracleRequestParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandOracleRequestParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandOracleRequestParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandOracleRequestParams(ctx, req.(*QueryBandOracleRequestParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandOracleRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandOracleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandOracleRequest(ctx, req.(*QueryBandOracleRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOracleScriptIdByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleScriptIdByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOracleScriptIdByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryOracleScriptIdByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleScriptIdByDenom(ctx, req.(*QueryOracleScriptIdByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BandPriceStates",
			Handler:    _Query_BandPriceStates_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "BandParams",
			Handler:    _Query_BandParams_Handler,
		},
		{
			MethodName: "BandOracleRequestParams",
			Handler:    _Query_BandOracleRequestParams_Handler,
		},
		{
			MethodName: "BandOracleRequest",
			Handler:    _Query_BandOracleRequest_Handler,
		},
		{
			MethodName: "QueryOracleScriptIdByDenom",
			Handler:    _Query_QueryOracleScriptIdByDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserve/oracle/query.proto",
}
