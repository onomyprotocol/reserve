// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: reserve/oracle/tx.proto

package oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                  = "/reserve.oracle.Msg/UpdateParams"
	Msg_RequestBandRates_FullMethodName              = "/reserve.oracle.Msg/RequestBandRates"
	Msg_UpdateBandParams_FullMethodName              = "/reserve.oracle.Msg/UpdateBandParams"
	Msg_UpdateBandOracleRequest_FullMethodName       = "/reserve.oracle.Msg/UpdateBandOracleRequest"
	Msg_DeleteBandOracleRequests_FullMethodName      = "/reserve.oracle.Msg/DeleteBandOracleRequests"
	Msg_UpdateBandOracleRequestParams_FullMethodName = "/reserve.oracle.Msg/UpdateBandOracleRequestParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RequestBandRates(ctx context.Context, in *MsgRequestBandRates, opts ...grpc.CallOption) (*MsgRequestBandRatesResponse, error)
	UpdateBandParams(ctx context.Context, in *MsgUpdateBandParams, opts ...grpc.CallOption) (*MsgUpdateBandParamsResponse, error)
	UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequestRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequests(ctx context.Context, in *MsgDeleteBandOracleRequests, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestsResponse, error)
	UpdateBandOracleRequestParams(ctx context.Context, in *MsgUpdateBandOracleRequestParamsRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBandRates(ctx context.Context, in *MsgRequestBandRates, opts ...grpc.CallOption) (*MsgRequestBandRatesResponse, error) {
	out := new(MsgRequestBandRatesResponse)
	err := c.cc.Invoke(ctx, Msg_RequestBandRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandParams(ctx context.Context, in *MsgUpdateBandParams, opts ...grpc.CallOption) (*MsgUpdateBandParamsResponse, error) {
	out := new(MsgUpdateBandParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateBandParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequestRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error) {
	out := new(MsgUpdateBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateBandOracleRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBandOracleRequests(ctx context.Context, in *MsgDeleteBandOracleRequests, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestsResponse, error) {
	out := new(MsgDeleteBandOracleRequestsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteBandOracleRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandOracleRequestParams(ctx context.Context, in *MsgUpdateBandOracleRequestParamsRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestParamsResponse, error) {
	out := new(MsgUpdateBandOracleRequestParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateBandOracleRequestParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RequestBandRates(context.Context, *MsgRequestBandRates) (*MsgRequestBandRatesResponse, error)
	UpdateBandParams(context.Context, *MsgUpdateBandParams) (*MsgUpdateBandParamsResponse, error)
	UpdateBandOracleRequest(context.Context, *MsgUpdateBandOracleRequestRequest) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequests(context.Context, *MsgDeleteBandOracleRequests) (*MsgDeleteBandOracleRequestsResponse, error)
	UpdateBandOracleRequestParams(context.Context, *MsgUpdateBandOracleRequestParamsRequest) (*MsgUpdateBandOracleRequestParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RequestBandRates(context.Context, *MsgRequestBandRates) (*MsgRequestBandRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBandRates not implemented")
}
func (UnimplementedMsgServer) UpdateBandParams(context.Context, *MsgUpdateBandParams) (*MsgUpdateBandParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandParams not implemented")
}
func (UnimplementedMsgServer) UpdateBandOracleRequest(context.Context, *MsgUpdateBandOracleRequestRequest) (*MsgUpdateBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandOracleRequest not implemented")
}
func (UnimplementedMsgServer) DeleteBandOracleRequests(context.Context, *MsgDeleteBandOracleRequests) (*MsgDeleteBandOracleRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBandOracleRequests not implemented")
}
func (UnimplementedMsgServer) UpdateBandOracleRequestParams(context.Context, *MsgUpdateBandOracleRequestParamsRequest) (*MsgUpdateBandOracleRequestParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandOracleRequestParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBandRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBandRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBandRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestBandRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBandRates(ctx, req.(*MsgRequestBandRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateBandParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandParams(ctx, req.(*MsgUpdateBandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandOracleRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateBandOracleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, req.(*MsgUpdateBandOracleRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBandOracleRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBandOracleRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBandOracleRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteBandOracleRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBandOracleRequests(ctx, req.(*MsgDeleteBandOracleRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandOracleRequestParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandOracleRequestParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandOracleRequestParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateBandOracleRequestParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandOracleRequestParams(ctx, req.(*MsgUpdateBandOracleRequestParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.oracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RequestBandRates",
			Handler:    _Msg_RequestBandRates_Handler,
		},
		{
			MethodName: "UpdateBandParams",
			Handler:    _Msg_UpdateBandParams_Handler,
		},
		{
			MethodName: "UpdateBandOracleRequest",
			Handler:    _Msg_UpdateBandOracleRequest_Handler,
		},
		{
			MethodName: "DeleteBandOracleRequests",
			Handler:    _Msg_DeleteBandOracleRequests_Handler,
		},
		{
			MethodName: "UpdateBandOracleRequestParams",
			Handler:    _Msg_UpdateBandOracleRequestParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserve/oracle/tx.proto",
}
