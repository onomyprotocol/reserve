syntax = "proto3";
package reserve.auction.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "reserve/auction/v1/params.proto";

option go_package = "github.com/onomyprotocol/reserve/x/auction/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Bid defines an operation for submit a bid entry.
  rpc Bid(MsgBid) returns (MsgBidResponse);

  // CancelBid defines an operation for cancel an existing bid entry.
  rpc CancelBid(MsgCancelBid) returns (MsgCancelBidResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "reserve/x/auction/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgBid is the Msg/Bid request type.
message MsgBid {
  option (cosmos.msg.v1.signer) = "bidder";
  option (amino.name) = "reserve/x/auction/MsgBid";

  // bidder is the address that submitting the bid entry.
  string bidder = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // bidding auction id 
  uint64 auction_id = 2;

  // amount defines the amount that the bidder willing to pay.
  cosmos.base.v1beta1.Coin amount = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // recive_rate defines the price that the bid is willing to pay
  string recive_rate = 4 [ (cosmos_proto.scalar) = "cosmos.Dec" ];
}

// MsgBidResponse defines the response structure for executing a
// MsgBid message.
message MsgBidResponse {
  string response = 1;

  uint64 bid_id = 2;
}

// MsgCancelBid is the Msg/CancelBid request type.
message MsgCancelBid {
  option (cosmos.msg.v1.signer) = "bidder";
  option (amino.name) = "reserve/x/auction/MsgCancelBid";

  // bidder is the address that submitting the bid entry.
  string bidder = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // bid_id is the unique id.
  uint64 bid_id = 2;

  // bidding auction id 
  uint64 auction_id = 3;
}

// MsgCancelBidResponse defines the response structure for executing a
// MsgCancelBid message.
message MsgCancelBidResponse {}