syntax = "proto3";
package reserve.oracle;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "reserve/oracle/params.proto";
import "reserve/oracle/genesis.proto";

option go_package = "github.com/onomyprotocol/reserve/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/reserve/oracle/params";
  }
  // Retrieves the state for all band price feeds
  rpc BandPriceStates(QueryBandPriceStatesRequest)
      returns (QueryBandPriceStatesResponse) {
    option (google.api.http).get =
        "/reserve/oracle/band_price_states";
  }
  // Retrieves the price of base/quote
  rpc Price(QueryPriceRequest)
      returns (QueryPriceResponse) {
    option (google.api.http).get =
      "/reserve/oracle/price";
  }
  // Retrieves the band paraparametersms
  rpc BandParams(QueryBandParamsRequest)
      returns (QueryBandParamsResponse) {
    option (google.api.http).get =
      "/reserve/oracle/band_params";
  }
  // Retrieves the band oracle request parameters
  rpc BandOracleRequestParams(QueryBandOracleRequestParamsRequest)
      returns (QueryBandOracleRequestParamsResponse) {
    option (google.api.http).get =
      "/reserve/oracle/band_oracle_request_params";
  }
  // Retrieves the band oracle request parameters
  rpc BandOracleRequest(QueryBandOracleRequestRequest)
      returns (QueryBandOracleRequestResponse) {
    option (google.api.http).get =
      "/reserve/oracle/band_oracle_request";
  }

  rpc QueryOracleScriptIdByDenom(QueryOracleScriptIdByDenomRequest)
      returns (QueryOracleScriptIdByDenomResponse) {
    option (google.api.http).get =
        "/reserve/oracle/band_price_states";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryBandPriceStatesRequest is the request type for the
// Query/BandPriceStates RPC method.
message QueryBandPriceStatesRequest {}

// QueryBandPriceStatesResponse is the response type for the
// Query/BandPriceStates RPC method.
message QueryBandPriceStatesResponse {
  repeated BandPriceState price_states = 1;
}

// QueryPriceRequest is the request type for the
// Query/Price RPC method.
message QueryPriceRequest {
  string base_denom = 1;

  string quote_denom = 2;
}

// QueryPriceResponse is the response type for the
// Query/Price RPC method
message QueryPriceResponse {
  string price = 1;
}

// QueryBandParamsRequest is the request type for the
// Query/BandParams RPC method.
message QueryBandParamsRequest {}

// QueryBandParamsResponse is the response type for the
// Query/BandParams RPC method.
message QueryBandParamsResponse {
  BandParams band_params = 1;
}

// QueryBandOracleRequestParamsRequest is the request type for the
// Query/BandOracleRequestParams RPC method.
message QueryBandOracleRequestParamsRequest {}

// QueryBandOracleRequestParamsResponse is the response type for the
// Query/BandOracleRequestParams RPC method.
message QueryBandOracleRequestParamsResponse {
  BandOracleRequestParams band_oracle_request_params = 1;
}

// QueryBandOracleRequestRequest is the request type for the
// Query/QueryBandOracleRequest RPC method.
message QueryBandOracleRequestRequest {
  string request_id = 1;
}

// QueryBandOracleRequestResponse is the response type for the
// Query/QueryBandOracleRequest RPC method.
message QueryBandOracleRequestResponse {
  BandOracleRequest band_oracle_request = 1;
}

message QueryOracleScriptIdByDenomRequest {
  string denom = 1;
}


message QueryOracleScriptIdByDenomResponse {
  repeated int64 oracle_script_ids = 1;
}