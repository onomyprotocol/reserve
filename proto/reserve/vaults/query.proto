syntax = "proto3";
package reserve.vaults;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "reserve/vaults/params.proto";

option go_package = "github.com/onomyprotocol/reserve/x/vaults/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryAllCollateral(QueryAllCollateralRequest) returns (QueryAllCollateralResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryCollateralsByDenom(QueryCollateralsByDenomRequest) returns (QueryCollateralsByDenomResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryCollateralsByMintDenom(QueryCollateralsByMintDenomRequest) returns (QueryCollateralsByMintDenomResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryCollateralsByDenomMintDenom(QueryCollateralsByDenomMintDenomRequest) returns (QueryCollateralsByDenomMintDenomResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryAllVaults(QueryAllVaultsRequest) returns (QueryAllVaultsResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryVaultsByID(QueryVaultIdRequest) returns (QueryVaultIdResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }

  rpc QueryVaultByOwner(QueryVaultByOwnerRequest) returns (QueryVaultByOwnerResponse){
    option (google.api.http).get = "/reserve/vaults/params";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message QueryVaultIdRequest {
  uint64 vault_id  = 1;
}

message QueryVaultIdResponse{
  Vault vault = 1;
}

message QueryAllVaultsRequest {
}

message QueryAllVaultsResponse{
 repeated Vault all_vault = 1;
}

message QueryAllCollateralRequest {}

message QueryAllCollateralResponse{
  repeated  VaultManager all_vault_manager = 1; 
}

message QueryCollateralsByDenomRequest {
  string denom = 1;
}

message QueryCollateralsByDenomResponse{
  repeated  VaultManager all_vault_manager_by_denom = 1; 
}

message QueryCollateralsByMintDenomRequest {
  string mint_denom = 1;
}

message QueryCollateralsByMintDenomResponse{
  repeated  VaultManager all_vault_manager_by_mint_denom = 1; 
}

message QueryCollateralsByDenomMintDenomRequest {
  string denom = 1;
  string mint_denom = 2;
}

message QueryCollateralsByDenomMintDenomResponse{
  VaultManager vault_manager = 1; 
}

message QueryVaultByOwnerRequest {
  string address  = 1;
}

message QueryVaultByOwnerResponse{
  repeated  Vault vaults = 1; 
}