// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/oracle/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateBandParamsProposal struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BandParams  BandParams `protobuf:"bytes,3,opt,name=band_params,json=bandParams,proto3" json:"band_params"`
}

func (m *UpdateBandParamsProposal) Reset()         { *m = UpdateBandParamsProposal{} }
func (m *UpdateBandParamsProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateBandParamsProposal) ProtoMessage()    {}
func (*UpdateBandParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7efcb1ff26f229a, []int{0}
}
func (m *UpdateBandParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBandParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBandParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBandParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBandParamsProposal.Merge(m, src)
}
func (m *UpdateBandParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBandParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBandParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBandParamsProposal proto.InternalMessageInfo

type UpdateBandOracleRequestProposal struct {
	Title               string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description         string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UpdateOracleRequest *BandOracleRequest `protobuf:"bytes,4,opt,name=update_oracle_request,json=updateOracleRequest,proto3" json:"update_oracle_request,omitempty"`
}

func (m *UpdateBandOracleRequestProposal) Reset()         { *m = UpdateBandOracleRequestProposal{} }
func (m *UpdateBandOracleRequestProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateBandOracleRequestProposal) ProtoMessage()    {}
func (*UpdateBandOracleRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7efcb1ff26f229a, []int{1}
}
func (m *UpdateBandOracleRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBandOracleRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBandOracleRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBandOracleRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBandOracleRequestProposal.Merge(m, src)
}
func (m *UpdateBandOracleRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBandOracleRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBandOracleRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBandOracleRequestProposal proto.InternalMessageInfo

type DeleteBandOracleRequestProposal struct {
	Title            string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DeleteRequestIds []uint64 `protobuf:"varint,3,rep,packed,name=delete_request_ids,json=deleteRequestIds,proto3" json:"delete_request_ids,omitempty"`
}

func (m *DeleteBandOracleRequestProposal) Reset()         { *m = DeleteBandOracleRequestProposal{} }
func (m *DeleteBandOracleRequestProposal) String() string { return proto.CompactTextString(m) }
func (*DeleteBandOracleRequestProposal) ProtoMessage()    {}
func (*DeleteBandOracleRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7efcb1ff26f229a, []int{2}
}
func (m *DeleteBandOracleRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBandOracleRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBandOracleRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBandOracleRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBandOracleRequestProposal.Merge(m, src)
}
func (m *DeleteBandOracleRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBandOracleRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBandOracleRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBandOracleRequestProposal proto.InternalMessageInfo

type BandParams struct {
	// block request interval to send Band IBC prices
	IbcRequestInterval int64 `protobuf:"varint,1,opt,name=ibc_request_interval,json=ibcRequestInterval,proto3" json:"ibc_request_interval,omitempty"`
	// band IBC source channel
	IbcSourceChannel string `protobuf:"bytes,2,opt,name=ibc_source_channel,json=ibcSourceChannel,proto3" json:"ibc_source_channel,omitempty"`
	// band IBC version
	IbcVersion string `protobuf:"bytes,3,opt,name=ibc_version,json=ibcVersion,proto3" json:"ibc_version,omitempty"`
	// band IBC portID
	IbcPortId string `protobuf:"bytes,4,opt,name=ibc_port_id,json=ibcPortId,proto3" json:"ibc_port_id,omitempty"`
	//  legacy oracle scheme ids
	LegacyOracleIds []int64 `protobuf:"varint,5,rep,packed,name=legacy_oracle_ids,json=legacyOracleIds,proto3" json:"legacy_oracle_ids,omitempty"`
}

func (m *BandParams) Reset()         { *m = BandParams{} }
func (m *BandParams) String() string { return proto.CompactTextString(m) }
func (*BandParams) ProtoMessage()    {}
func (*BandParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7efcb1ff26f229a, []int{3}
}
func (m *BandParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandParams.Merge(m, src)
}
func (m *BandParams) XXX_Size() int {
	return m.Size()
}
func (m *BandParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BandParams.DiscardUnknown(m)
}

var xxx_messageInfo_BandParams proto.InternalMessageInfo

func (m *BandParams) GetIbcRequestInterval() int64 {
	if m != nil {
		return m.IbcRequestInterval
	}
	return 0
}

func (m *BandParams) GetIbcSourceChannel() string {
	if m != nil {
		return m.IbcSourceChannel
	}
	return ""
}

func (m *BandParams) GetIbcVersion() string {
	if m != nil {
		return m.IbcVersion
	}
	return ""
}

func (m *BandParams) GetIbcPortId() string {
	if m != nil {
		return m.IbcPortId
	}
	return ""
}

func (m *BandParams) GetLegacyOracleIds() []int64 {
	if m != nil {
		return m.LegacyOracleIds
	}
	return nil
}

type BandOracleRequest struct {
	// Unique Identifier for band ibc oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// OracleScriptID is the unique identifier of the oracle script to be
	// executed.
	OracleScriptId int64 `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	// Symbols is the list of symbols to prepare in the calldata
	Symbols []string `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// AskCount is the number of validators that are requested to respond to this
	// oracle request. Higher value means more security, at a higher gas cost.
	AskCount uint64 `protobuf:"varint,4,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	// MinCount is the minimum number of validators necessary for the request to
	// proceed to the execution phase. Higher value means more security, at the
	// cost of liveness.
	MinCount uint64 `protobuf:"varint,5,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// FeeLimit is the maximum tokens that will be paid to all data source
	// providers.
	FeeLimit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	// PrepareGas is amount of gas to pay to prepare raw requests
	PrepareGas uint64 `protobuf:"varint,7,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	// ExecuteGas is amount of gas to reserve for executing
	ExecuteGas uint64 `protobuf:"varint,8,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	// MinSourceCount is the minimum number of data sources that must be used by
	// each validator
	MinSourceCount uint64 `protobuf:"varint,9,opt,name=min_source_count,json=minSourceCount,proto3" json:"min_source_count,omitempty"`
}

func (m *BandOracleRequest) Reset()         { *m = BandOracleRequest{} }
func (m *BandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*BandOracleRequest) ProtoMessage()    {}
func (*BandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7efcb1ff26f229a, []int{4}
}
func (m *BandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandOracleRequest.Merge(m, src)
}
func (m *BandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *BandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BandOracleRequest proto.InternalMessageInfo

func (m *BandOracleRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *BandOracleRequest) GetOracleScriptId() int64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

func (m *BandOracleRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *BandOracleRequest) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *BandOracleRequest) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *BandOracleRequest) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *BandOracleRequest) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *BandOracleRequest) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *BandOracleRequest) GetMinSourceCount() uint64 {
	if m != nil {
		return m.MinSourceCount
	}
	return 0
}

func init() {
	proto.RegisterType((*UpdateBandParamsProposal)(nil), "reserve.oracle.UpdateBandParamsProposal")
	proto.RegisterType((*UpdateBandOracleRequestProposal)(nil), "reserve.oracle.UpdateBandOracleRequestProposal")
	proto.RegisterType((*DeleteBandOracleRequestProposal)(nil), "reserve.oracle.DeleteBandOracleRequestProposal")
	proto.RegisterType((*BandParams)(nil), "reserve.oracle.BandParams")
	proto.RegisterType((*BandOracleRequest)(nil), "reserve.oracle.BandOracleRequest")
}

func init() { proto.RegisterFile("reserve/oracle/proposal.proto", fileDescriptor_b7efcb1ff26f229a) }

var fileDescriptor_b7efcb1ff26f229a = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6b, 0xdc, 0x46,
	0x18, 0x5e, 0x59, 0xeb, 0x0f, 0xcd, 0x82, 0xbb, 0x56, 0x5d, 0x90, 0xb7, 0x58, 0xbb, 0xdd, 0x93,
	0x6a, 0x6a, 0xc9, 0x76, 0x6f, 0xbe, 0x75, 0x5d, 0x28, 0x0b, 0x85, 0x1a, 0xb9, 0xee, 0xa1, 0x3d,
	0x88, 0xd1, 0x68, 0xbc, 0x1e, 0x2c, 0xcd, 0xa8, 0x33, 0xda, 0xc5, 0xfb, 0x07, 0x4a, 0x29, 0x14,
	0xf2, 0x13, 0x7c, 0xce, 0x29, 0x87, 0xfc, 0x08, 0x93, 0x93, 0x8f, 0xc9, 0x25, 0x09, 0x76, 0x20,
	0x81, 0xfc, 0x89, 0x30, 0x1f, 0xca, 0xda, 0xd8, 0xf9, 0x00, 0x93, 0xcb, 0xae, 0xe6, 0x79, 0x1e,
	0xbd, 0x7a, 0x9f, 0xe7, 0x7d, 0x19, 0xb0, 0xce, 0xb1, 0xc0, 0x7c, 0x82, 0x23, 0xc6, 0x21, 0xca,
	0x71, 0x54, 0x72, 0x56, 0x32, 0x01, 0xf3, 0xb0, 0xe4, 0xac, 0x62, 0xee, 0xb2, 0xa1, 0x43, 0x4d,
	0x77, 0x56, 0x60, 0x41, 0x28, 0x8b, 0xd4, 0xaf, 0x96, 0x74, 0x56, 0x47, 0x6c, 0xc4, 0xd4, 0x63,
	0x24, 0x9f, 0x0c, 0xba, 0x86, 0x98, 0x28, 0x98, 0x48, 0x34, 0xa1, 0x0f, 0x86, 0xf2, 0xf5, 0x29,
	0x4a, 0xa1, 0xc0, 0xd1, 0x64, 0x3b, 0xc5, 0x15, 0xdc, 0x8e, 0x10, 0x23, 0x54, 0xf3, 0xfd, 0xb7,
	0x16, 0xf0, 0x0e, 0xcb, 0x0c, 0x56, 0x78, 0x00, 0x69, 0xb6, 0x0f, 0x39, 0x2c, 0xc4, 0xbe, 0x69,
	0xcb, 0x5d, 0x05, 0xf3, 0x15, 0xa9, 0x72, 0xec, 0x59, 0x3d, 0x2b, 0x70, 0x62, 0x7d, 0x70, 0x7b,
	0xa0, 0x95, 0x61, 0x81, 0x38, 0x29, 0x2b, 0xc2, 0xa8, 0x37, 0xa7, 0xb8, 0xeb, 0x90, 0xfb, 0x13,
	0x68, 0xa5, 0x90, 0x66, 0x49, 0xa9, 0xca, 0x79, 0x76, 0xcf, 0x0a, 0x5a, 0x3b, 0x9d, 0xf0, 0xa6,
	0xbd, 0x70, 0xf6, 0xc1, 0x41, 0xf3, 0xfc, 0x79, 0xb7, 0x11, 0x83, 0xf4, 0x3d, 0xb2, 0xfb, 0xfb,
	0xbf, 0x67, 0xdd, 0xc6, 0x9b, 0xb3, 0x6e, 0xe3, 0xc9, 0xe3, 0xcd, 0x8e, 0x71, 0x34, 0x62, 0x93,
	0xd0, 0x58, 0x08, 0xf7, 0x18, 0xad, 0x30, 0xad, 0xfe, 0x7b, 0xfd, 0x68, 0xe3, 0xfb, 0x3a, 0xd5,
	0xd3, 0x3a, 0xd7, 0x0f, 0x19, 0xea, 0xff, 0x3f, 0x07, 0xba, 0x33, 0xf2, 0x37, 0xa5, 0x8e, 0xf1,
	0xdf, 0x63, 0x2c, 0xaa, 0x7b, 0x9b, 0x3e, 0x04, 0xdf, 0x8c, 0x55, 0xe9, 0x44, 0x77, 0x91, 0x70,
	0x5d, 0xd8, 0x6b, 0x2a, 0xfb, 0xdf, 0xdd, 0x65, 0xff, 0x46, 0x07, 0xf1, 0xd7, 0xfa, 0xfd, 0x1b,
	0xe0, 0xee, 0x5f, 0x9f, 0x1f, 0xc4, 0xd6, 0x47, 0x82, 0xb8, 0xd3, 0x6b, 0xff, 0x95, 0x05, 0xba,
	0x3f, 0xe3, 0x1c, 0x7f, 0x89, 0x3c, 0x7e, 0x00, 0x6e, 0xa6, 0x4a, 0xd7, 0x41, 0x24, 0x24, 0x93,
	0xbb, 0x60, 0x07, 0xcd, 0xb8, 0xad, 0x19, 0xf3, 0xa9, 0x61, 0x26, 0xee, 0x67, 0xf3, 0x13, 0x16,
	0xfa, 0xcf, 0x2c, 0x00, 0x66, 0xdb, 0xe0, 0x6e, 0x81, 0x55, 0x92, 0xa2, 0x59, 0x5b, 0xb4, 0xc2,
	0x7c, 0x02, 0x73, 0x65, 0xd0, 0x8e, 0x5d, 0x92, 0xa2, 0xba, 0x31, 0xc3, 0x48, 0x2f, 0xf2, 0x0d,
	0xc1, 0xc6, 0x1c, 0xe1, 0x04, 0x1d, 0x43, 0x4a, 0x71, 0x6e, 0x4c, 0xb7, 0x49, 0x8a, 0x0e, 0x14,
	0xb1, 0xa7, 0x71, 0xb7, 0x0b, 0x5a, 0x52, 0x3d, 0xc1, 0x5c, 0xc8, 0x6c, 0x6c, 0x25, 0x03, 0x24,
	0x45, 0x7f, 0x68, 0xc4, 0xf5, 0xb5, 0xa0, 0x64, 0x5c, 0x86, 0xa2, 0x16, 0xc4, 0x89, 0x1d, 0x92,
	0xa2, 0x7d, 0xc6, 0xab, 0x61, 0xe6, 0x6e, 0x80, 0x95, 0x1c, 0x8f, 0x20, 0x9a, 0xd6, 0xab, 0x24,
	0x93, 0x9b, 0xef, 0xd9, 0x81, 0x1d, 0x7f, 0xa5, 0x09, 0xed, 0x73, 0x98, 0x89, 0xfe, 0x3f, 0x36,
	0x58, 0xb9, 0xe5, 0xdc, 0x5d, 0x07, 0x60, 0x96, 0xba, 0x32, 0xd6, 0x8c, 0x1d, 0x5e, 0xc7, 0xed,
	0x06, 0xa0, 0x6d, 0x2a, 0xeb, 0x79, 0x49, 0xd1, 0x9c, 0x72, 0xbf, 0xac, 0xf1, 0x03, 0x05, 0x0f,
	0x33, 0xd7, 0x03, 0x8b, 0x62, 0x5a, 0xa4, 0x2c, 0xd7, 0xa3, 0x73, 0xe2, 0xfa, 0xe8, 0x7e, 0x0b,
	0x1c, 0x28, 0x4e, 0x12, 0xc4, 0xc6, 0x54, 0xef, 0x78, 0x33, 0x5e, 0x82, 0xe2, 0x64, 0x4f, 0x9e,
	0x25, 0x59, 0x10, 0x6a, 0xc8, 0x79, 0x4d, 0x16, 0x84, 0x6a, 0xf2, 0x18, 0x38, 0x47, 0x18, 0x27,
	0x39, 0x29, 0x48, 0xe5, 0x2d, 0xf4, 0xec, 0xa0, 0xb5, 0xb3, 0x16, 0x9a, 0x99, 0xcb, 0x7b, 0xea,
	0xda, 0xd0, 0x09, 0x1d, 0x6c, 0xc9, 0xbb, 0xe1, 0xe1, 0x8b, 0x6e, 0x30, 0x22, 0xd5, 0xf1, 0x38,
	0x0d, 0x11, 0x2b, 0xcc, 0x15, 0x67, 0xfe, 0x36, 0x45, 0x76, 0x12, 0x55, 0xd3, 0x12, 0x0b, 0xf5,
	0x82, 0x88, 0x97, 0x8e, 0x30, 0xfe, 0x55, 0x16, 0x97, 0x93, 0x28, 0x39, 0x2e, 0x21, 0xc7, 0xc9,
	0x08, 0x0a, 0x6f, 0x51, 0x35, 0x02, 0x0c, 0xf4, 0x0b, 0x14, 0x52, 0x80, 0x4f, 0x31, 0x1a, 0x57,
	0x5a, 0xb0, 0xa4, 0x05, 0x06, 0x92, 0x82, 0x00, 0xb4, 0xa5, 0x91, 0x7a, 0xf2, 0xca, 0x8f, 0xa3,
	0x54, 0xcb, 0x05, 0xa1, 0x66, 0xee, 0x12, 0x1d, 0x0c, 0xcf, 0x2f, 0x7d, 0xeb, 0xe2, 0xd2, 0xb7,
	0x5e, 0x5e, 0xfa, 0xd6, 0x83, 0x2b, 0xbf, 0x71, 0x71, 0xe5, 0x37, 0x9e, 0x5e, 0xf9, 0x8d, 0x3f,
	0xa3, 0x6b, 0x9d, 0x33, 0xca, 0x8a, 0xa9, 0xba, 0x7a, 0x11, 0xcb, 0xa3, 0x5b, 0x9b, 0xac, 0x6c,
	0xa4, 0x0b, 0x4a, 0xf0, 0xe3, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x0b, 0xd3, 0x73, 0x30,
	0x06, 0x00, 0x00,
}

func (m *UpdateBandParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBandParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBandParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BandParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBandOracleRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBandOracleRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBandOracleRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateOracleRequest != nil {
		{
			size, err := m.UpdateOracleRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBandOracleRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBandOracleRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBandOracleRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteRequestIds) > 0 {
		dAtA4 := make([]byte, len(m.DeleteRequestIds)*10)
		var j3 int
		for _, num := range m.DeleteRequestIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintProposal(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BandParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LegacyOracleIds) > 0 {
		dAtA6 := make([]byte, len(m.LegacyOracleIds)*10)
		var j5 int
		for _, num1 := range m.LegacyOracleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintProposal(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IbcPortId) > 0 {
		i -= len(m.IbcPortId)
		copy(dAtA[i:], m.IbcPortId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.IbcPortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IbcVersion) > 0 {
		i -= len(m.IbcVersion)
		copy(dAtA[i:], m.IbcVersion)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.IbcVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IbcSourceChannel) > 0 {
		i -= len(m.IbcSourceChannel)
		copy(dAtA[i:], m.IbcSourceChannel)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.IbcSourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if m.IbcRequestInterval != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.IbcRequestInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinSourceCount != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.MinSourceCount))
		i--
		dAtA[i] = 0x48
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PrepareGas != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x28
	}
	if m.AskCount != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OracleScriptId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateBandParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.BandParams.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *UpdateBandOracleRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.UpdateOracleRequest != nil {
		l = m.UpdateOracleRequest.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *DeleteBandOracleRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.DeleteRequestIds) > 0 {
		l = 0
		for _, e := range m.DeleteRequestIds {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	return n
}

func (m *BandParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcRequestInterval != 0 {
		n += 1 + sovProposal(uint64(m.IbcRequestInterval))
	}
	l = len(m.IbcSourceChannel)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.IbcVersion)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.IbcPortId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.LegacyOracleIds) > 0 {
		l = 0
		for _, e := range m.LegacyOracleIds {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	return n
}

func (m *BandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovProposal(uint64(m.RequestId))
	}
	if m.OracleScriptId != 0 {
		n += 1 + sovProposal(uint64(m.OracleScriptId))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if m.AskCount != 0 {
		n += 1 + sovProposal(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovProposal(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovProposal(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovProposal(uint64(m.ExecuteGas))
	}
	if m.MinSourceCount != 0 {
		n += 1 + sovProposal(uint64(m.MinSourceCount))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateBandParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBandParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBandParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BandParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBandOracleRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBandOracleRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBandOracleRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateOracleRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateOracleRequest == nil {
				m.UpdateOracleRequest = &BandOracleRequest{}
			}
			if err := m.UpdateOracleRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBandOracleRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBandOracleRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBandOracleRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeleteRequestIds = append(m.DeleteRequestIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeleteRequestIds) == 0 {
					m.DeleteRequestIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeleteRequestIds = append(m.DeleteRequestIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRequestIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BandParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcRequestInterval", wireType)
			}
			m.IbcRequestInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcRequestInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcSourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LegacyOracleIds = append(m.LegacyOracleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LegacyOracleIds) == 0 {
					m.LegacyOracleIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LegacyOracleIds = append(m.LegacyOracleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOracleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSourceCount", wireType)
			}
			m.MinSourceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSourceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
