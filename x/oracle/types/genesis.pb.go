// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/oracle/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the oracle module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params                  Params                  `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	BandParams              BandParams              `protobuf:"bytes,2,opt,name=band_params,json=bandParams,proto3" json:"band_params"`
	BandPriceStates         []*BandPriceState       `protobuf:"bytes,3,rep,name=band_price_states,json=bandPriceStates,proto3" json:"band_price_states,omitempty"`
	BandOracleRequests      []*BandOracleRequest    `protobuf:"bytes,4,rep,name=band_oracle_requests,json=bandOracleRequests,proto3" json:"band_oracle_requests,omitempty"`
	BandLatestClientId      uint64                  `protobuf:"varint,5,opt,name=band_latest_client_id,json=bandLatestClientId,proto3" json:"band_latest_client_id,omitempty"`
	CalldataRecords         []*CalldataRecord       `protobuf:"bytes,6,rep,name=calldata_records,json=calldataRecords,proto3" json:"calldata_records,omitempty"`
	BandLatestRequestId     uint64                  `protobuf:"varint,7,opt,name=band_latest_request_id,json=bandLatestRequestId,proto3" json:"band_latest_request_id,omitempty"`
	BandOracleRequestParams BandOracleRequestParams `protobuf:"bytes,8,opt,name=band_oracle_request_params,json=bandOracleRequestParams,proto3" json:"band_oracle_request_params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_78a657bc7a2646c9, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetBandParams() BandParams {
	if m != nil {
		return m.BandParams
	}
	return BandParams{}
}

func (m *GenesisState) GetBandPriceStates() []*BandPriceState {
	if m != nil {
		return m.BandPriceStates
	}
	return nil
}

func (m *GenesisState) GetBandOracleRequests() []*BandOracleRequest {
	if m != nil {
		return m.BandOracleRequests
	}
	return nil
}

func (m *GenesisState) GetBandLatestClientId() uint64 {
	if m != nil {
		return m.BandLatestClientId
	}
	return 0
}

func (m *GenesisState) GetCalldataRecords() []*CalldataRecord {
	if m != nil {
		return m.CalldataRecords
	}
	return nil
}

func (m *GenesisState) GetBandLatestRequestId() uint64 {
	if m != nil {
		return m.BandLatestRequestId
	}
	return 0
}

func (m *GenesisState) GetBandOracleRequestParams() BandOracleRequestParams {
	if m != nil {
		return m.BandOracleRequestParams
	}
	return BandOracleRequestParams{}
}

type BandOracleRequestParams struct {
	// AskCount is the number of validators that are requested to respond to this
	// oracle request. Higher value means more security, at a higher gas cost.
	AskCount uint64 `protobuf:"varint,1,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	// MinCount is the minimum number of validators necessary for the request to
	// proceed to the execution phase. Higher value means more security, at the
	// cost of liveness.
	MinCount uint64 `protobuf:"varint,2,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// FeeLimit is the maximum tokens that will be paid to all data source
	// providers.
	FeeLimit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	// PrepareGas is amount of gas to pay to prepare raw requests
	PrepareGas uint64 `protobuf:"varint,4,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	// ExecuteGas is amount of gas to reserve for executing
	ExecuteGas uint64 `protobuf:"varint,5,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	// MinSourceCount is the minimum number of data sources that must be used by
	// each validator
	MinSourceCount uint64 `protobuf:"varint,6,opt,name=min_source_count,json=minSourceCount,proto3" json:"min_source_count,omitempty"`
}

func (m *BandOracleRequestParams) Reset()         { *m = BandOracleRequestParams{} }
func (m *BandOracleRequestParams) String() string { return proto.CompactTextString(m) }
func (*BandOracleRequestParams) ProtoMessage()    {}
func (*BandOracleRequestParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_78a657bc7a2646c9, []int{1}
}
func (m *BandOracleRequestParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandOracleRequestParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandOracleRequestParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandOracleRequestParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandOracleRequestParams.Merge(m, src)
}
func (m *BandOracleRequestParams) XXX_Size() int {
	return m.Size()
}
func (m *BandOracleRequestParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BandOracleRequestParams.DiscardUnknown(m)
}

var xxx_messageInfo_BandOracleRequestParams proto.InternalMessageInfo

func (m *BandOracleRequestParams) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *BandOracleRequestParams) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *BandOracleRequestParams) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *BandOracleRequestParams) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *BandOracleRequestParams) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *BandOracleRequestParams) GetMinSourceCount() uint64 {
	if m != nil {
		return m.MinSourceCount
	}
	return 0
}

type BandPriceState struct {
	Symbol      string                `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Rate        cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=rate,proto3,customtype=cosmossdk.io/math.Int" json:"rate"`
	ResolveTime uint64                `protobuf:"varint,3,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	Request_ID  uint64                `protobuf:"varint,4,opt,name=request_ID,json=requestID,proto3" json:"request_ID,omitempty"`
	PriceState  PriceState            `protobuf:"bytes,5,opt,name=price_state,json=priceState,proto3" json:"price_state"`
}

func (m *BandPriceState) Reset()         { *m = BandPriceState{} }
func (m *BandPriceState) String() string { return proto.CompactTextString(m) }
func (*BandPriceState) ProtoMessage()    {}
func (*BandPriceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_78a657bc7a2646c9, []int{2}
}
func (m *BandPriceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandPriceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandPriceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandPriceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandPriceState.Merge(m, src)
}
func (m *BandPriceState) XXX_Size() int {
	return m.Size()
}
func (m *BandPriceState) XXX_DiscardUnknown() {
	xxx_messageInfo_BandPriceState.DiscardUnknown(m)
}

var xxx_messageInfo_BandPriceState proto.InternalMessageInfo

func (m *BandPriceState) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BandPriceState) GetResolveTime() uint64 {
	if m != nil {
		return m.ResolveTime
	}
	return 0
}

func (m *BandPriceState) GetRequest_ID() uint64 {
	if m != nil {
		return m.Request_ID
	}
	return 0
}

func (m *BandPriceState) GetPriceState() PriceState {
	if m != nil {
		return m.PriceState
	}
	return PriceState{}
}

type PriceState struct {
	Price     cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	Timestamp int64                       `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *PriceState) Reset()         { *m = PriceState{} }
func (m *PriceState) String() string { return proto.CompactTextString(m) }
func (*PriceState) ProtoMessage()    {}
func (*PriceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_78a657bc7a2646c9, []int{3}
}
func (m *PriceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceState.Merge(m, src)
}
func (m *PriceState) XXX_Size() int {
	return m.Size()
}
func (m *PriceState) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceState.DiscardUnknown(m)
}

var xxx_messageInfo_PriceState proto.InternalMessageInfo

func (m *PriceState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CalldataRecord struct {
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Calldata []byte `protobuf:"bytes,2,opt,name=calldata,proto3" json:"calldata,omitempty"`
}

func (m *CalldataRecord) Reset()         { *m = CalldataRecord{} }
func (m *CalldataRecord) String() string { return proto.CompactTextString(m) }
func (*CalldataRecord) ProtoMessage()    {}
func (*CalldataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_78a657bc7a2646c9, []int{4}
}
func (m *CalldataRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalldataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalldataRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalldataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalldataRecord.Merge(m, src)
}
func (m *CalldataRecord) XXX_Size() int {
	return m.Size()
}
func (m *CalldataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CalldataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CalldataRecord proto.InternalMessageInfo

func (m *CalldataRecord) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CalldataRecord) GetCalldata() []byte {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "reserve.oracle.GenesisState")
	proto.RegisterType((*BandOracleRequestParams)(nil), "reserve.oracle.BandOracleRequestParams")
	proto.RegisterType((*BandPriceState)(nil), "reserve.oracle.BandPriceState")
	proto.RegisterType((*PriceState)(nil), "reserve.oracle.PriceState")
	proto.RegisterType((*CalldataRecord)(nil), "reserve.oracle.CalldataRecord")
}

func init() { proto.RegisterFile("reserve/oracle/genesis.proto", fileDescriptor_78a657bc7a2646c9) }

var fileDescriptor_78a657bc7a2646c9 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x8e, 0x9b, 0x6c, 0x48, 0x26, 0x55, 0x76, 0x77, 0xd8, 0xed, 0x86, 0x74, 0xeb, 0x74, 0xc3,
	0x81, 0x08, 0x09, 0x9b, 0xb4, 0xa7, 0x1e, 0x49, 0x2a, 0x55, 0x46, 0x95, 0x40, 0x2e, 0x27, 0x2e,
	0xd6, 0x78, 0xfc, 0x36, 0x1d, 0x62, 0x7b, 0x8c, 0x67, 0x52, 0x35, 0xff, 0x82, 0x9f, 0x01, 0x9c,
	0xf8, 0x19, 0x3d, 0x70, 0xe8, 0x11, 0x71, 0x28, 0x55, 0x7b, 0xe0, 0x6f, 0xa0, 0xf9, 0x48, 0xf3,
	0x41, 0x10, 0x97, 0xc4, 0xf3, 0x3e, 0xcf, 0xfb, 0xf1, 0x8c, 0xdf, 0xc7, 0xe8, 0x7d, 0x09, 0x02,
	0xca, 0x6b, 0xf0, 0x79, 0x49, 0x68, 0x0a, 0xfe, 0x04, 0x72, 0x10, 0x4c, 0x78, 0x45, 0xc9, 0x25,
	0xc7, 0x6d, 0x8b, 0x7a, 0x06, 0xed, 0xbe, 0x26, 0x19, 0xcb, 0xb9, 0xaf, 0x7f, 0x0d, 0xa5, 0xfb,
	0x66, 0xc2, 0x27, 0x5c, 0x3f, 0xfa, 0xea, 0xc9, 0x46, 0x5d, 0xca, 0x45, 0xc6, 0x85, 0x1f, 0x13,
	0x01, 0xfe, 0xf5, 0x30, 0x06, 0x49, 0x86, 0x3e, 0xe5, 0x2c, 0xb7, 0xf8, 0xfe, 0x46, 0xdb, 0x82,
	0x94, 0x24, 0xb3, 0x5d, 0xbb, 0x07, 0x9b, 0x60, 0xc9, 0x0b, 0x2e, 0x48, 0x6a, 0xe0, 0xfe, 0xef,
	0x35, 0xb4, 0x7b, 0x66, 0xc6, 0xbc, 0x90, 0x44, 0x02, 0x3e, 0x41, 0x75, 0x93, 0xdf, 0x71, 0x0e,
	0x9d, 0x41, 0xeb, 0x68, 0xcf, 0x5b, 0x1f, 0xdb, 0xfb, 0x56, 0xa3, 0xa3, 0xe6, 0xed, 0x7d, 0xaf,
	0xf2, 0xf3, 0xdf, 0xbf, 0x7d, 0xee, 0x84, 0x36, 0x01, 0x7f, 0x85, 0x5a, 0x31, 0xc9, 0x93, 0xc8,
	0xe6, 0xef, 0xe8, 0xfc, 0xee, 0x66, 0xfe, 0x88, 0xe4, 0x89, 0xad, 0x51, 0x53, 0x35, 0x42, 0x14,
	0x3f, 0x47, 0xf0, 0xd7, 0xe8, 0xb5, 0x29, 0x51, 0x32, 0x0a, 0x91, 0x50, 0x13, 0x89, 0x4e, 0xf5,
	0xb0, 0x3a, 0x68, 0x1d, 0xb9, 0x5b, 0x0b, 0x29, 0x9e, 0x1e, 0x3c, 0x7c, 0x19, 0xaf, 0x9d, 0x05,
	0xbe, 0x40, 0x6f, 0x74, 0x2d, 0x43, 0x8f, 0x4a, 0xf8, 0x71, 0x06, 0x42, 0x8a, 0x4e, 0x4d, 0x97,
	0xfb, 0xb0, 0xad, 0xdc, 0x37, 0xfa, 0x31, 0x34, 0xcc, 0x10, 0xc7, 0x9b, 0x21, 0x81, 0x87, 0xe8,
	0xad, 0x2e, 0x9a, 0xaa, 0x16, 0x32, 0xa2, 0x29, 0x83, 0x5c, 0x46, 0x2c, 0xe9, 0xbc, 0x38, 0x74,
	0x06, 0x35, 0x93, 0x72, 0xae, 0xb1, 0xb1, 0x86, 0x82, 0x04, 0x07, 0xe8, 0x15, 0x25, 0x69, 0x9a,
	0x10, 0x49, 0xa2, 0x12, 0x28, 0x2f, 0x13, 0xd1, 0xa9, 0x6f, 0x97, 0x34, 0xb6, 0xbc, 0x50, 0xd3,
	0xc2, 0x97, 0x74, 0xed, 0x2c, 0xf0, 0x31, 0xda, 0x5b, 0xed, 0x6e, 0x25, 0xa9, 0xf6, 0x1f, 0xe9,
	0xf6, 0x1f, 0x2f, 0xdb, 0xdb, 0x89, 0x83, 0x04, 0xff, 0x80, 0xba, 0x5b, 0xee, 0x61, 0xf1, 0x96,
	0x1a, 0xfa, 0x2d, 0x7d, 0xf6, 0xbf, 0xb7, 0xb1, 0xf6, 0xca, 0xde, 0xc5, 0xdb, 0xe1, 0xfe, 0x2f,
	0x3b, 0xe8, 0xdd, 0x7f, 0xa4, 0xe2, 0x7d, 0xd4, 0x24, 0x62, 0x1a, 0x51, 0x3e, 0xcb, 0xa5, 0x5e,
	0xae, 0x5a, 0xd8, 0x20, 0x62, 0x3a, 0x56, 0x67, 0x05, 0x66, 0x2c, 0xb7, 0xe0, 0x8e, 0x01, 0x33,
	0x96, 0x1b, 0xf0, 0x0a, 0x35, 0x2f, 0x01, 0xa2, 0x94, 0x65, 0x4c, 0xda, 0x6d, 0xf8, 0xc4, 0x33,
	0xa6, 0xf0, 0x94, 0x29, 0x3c, 0x6b, 0x0a, 0x6f, 0xcc, 0x59, 0x3e, 0xfa, 0x52, 0x8d, 0xf8, 0xeb,
	0x5f, 0xbd, 0xc1, 0x84, 0xc9, 0xab, 0x59, 0xec, 0x51, 0x9e, 0xf9, 0xd6, 0x41, 0xe6, 0xef, 0x0b,
	0x91, 0x4c, 0x7d, 0x39, 0x2f, 0x40, 0xe8, 0x04, 0x11, 0x36, 0x2e, 0x01, 0xce, 0x55, 0x71, 0xdc,
	0x43, 0xad, 0xa2, 0x84, 0x82, 0x94, 0x10, 0x4d, 0x88, 0x5a, 0x15, 0x35, 0x08, 0xb2, 0xa1, 0x33,
	0x22, 0x14, 0x01, 0x6e, 0x80, 0xce, 0xa4, 0x21, 0x98, 0xb7, 0x8e, 0x6c, 0x48, 0x11, 0x06, 0xe8,
	0x95, 0x12, 0x22, 0xf8, 0xac, 0xa4, 0x60, 0xf5, 0xd4, 0x35, 0xab, 0x9d, 0xb1, 0xfc, 0x42, 0x87,
	0xb5, 0xaa, 0xfe, 0x83, 0x83, 0xda, 0xeb, 0x3b, 0x8c, 0xf7, 0x50, 0x5d, 0xcc, 0xb3, 0x98, 0xa7,
	0xfa, 0x7e, 0x9a, 0xa1, 0x3d, 0xe1, 0x21, 0xaa, 0x95, 0x44, 0x82, 0xbe, 0x98, 0xe6, 0xe8, 0x40,
	0x09, 0xfc, 0xf3, 0xbe, 0xf7, 0xd6, 0xc8, 0x11, 0xc9, 0xd4, 0x63, 0xdc, 0xcf, 0x88, 0xbc, 0xf2,
	0x82, 0x5c, 0x86, 0x9a, 0x8a, 0x3f, 0xa0, 0xdd, 0x12, 0x04, 0x4f, 0xaf, 0x21, 0x92, 0x2c, 0x83,
	0x4e, 0x55, 0xcf, 0xd0, 0xb2, 0xb1, 0xef, 0x58, 0x06, 0xf8, 0x00, 0xa1, 0xc5, 0x32, 0x04, 0xa7,
	0x56, 0x6b, 0xd3, 0x46, 0x82, 0x53, 0x65, 0xe7, 0x15, 0x1b, 0x6a, 0xa9, 0x5b, 0xec, 0xbc, 0x9c,
	0x7e, 0x61, 0xe7, 0xe2, 0x39, 0xd2, 0x07, 0x84, 0x56, 0xd4, 0x9d, 0xa0, 0x17, 0x1a, 0x33, 0xe2,
	0x46, 0x9f, 0x5a, 0x19, 0xfb, 0xff, 0x96, 0x71, 0x0e, 0x13, 0x42, 0xe7, 0xa7, 0x40, 0x43, 0x93,
	0x81, 0xdf, 0xa3, 0xa6, 0x52, 0x21, 0x24, 0xc9, 0x0a, 0x7d, 0x0b, 0xd5, 0x70, 0x19, 0xe8, 0x07,
	0xa8, 0xbd, 0xee, 0x1c, 0xb5, 0x4e, 0x4b, 0x6b, 0xda, 0x5d, 0xa3, 0x0b, 0x43, 0x76, 0x51, 0x63,
	0x61, 0x2c, 0x5d, 0x6b, 0x37, 0x7c, 0x3e, 0x8f, 0x82, 0xdb, 0x47, 0xd7, 0xb9, 0x7b, 0x74, 0x9d,
	0x87, 0x47, 0xd7, 0xf9, 0xe9, 0xc9, 0xad, 0xdc, 0x3d, 0xb9, 0x95, 0x3f, 0x9e, 0xdc, 0xca, 0xf7,
	0xfe, 0xca, 0x3a, 0xf1, 0x9c, 0x67, 0x73, 0xfd, 0x01, 0xa5, 0x3c, 0xf5, 0x17, 0x5f, 0xd8, 0x9b,
	0xc5, 0x37, 0x56, 0xef, 0x56, 0x5c, 0xd7, 0x84, 0xe3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c,
	0x8c, 0x4d, 0x7f, 0x16, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BandOracleRequestParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.BandLatestRequestId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BandLatestRequestId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CalldataRecords) > 0 {
		for iNdEx := len(m.CalldataRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalldataRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BandLatestClientId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BandLatestClientId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BandOracleRequests) > 0 {
		for iNdEx := len(m.BandOracleRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BandOracleRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BandPriceStates) > 0 {
		for iNdEx := len(m.BandPriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BandPriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.BandParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BandOracleRequestParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandOracleRequestParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandOracleRequestParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinSourceCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinSourceCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x28
	}
	if m.PrepareGas != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x10
	}
	if m.AskCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BandPriceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandPriceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandPriceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PriceState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Request_ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Request_ID))
		i--
		dAtA[i] = 0x20
	}
	if m.ResolveTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ResolveTime))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CalldataRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalldataRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalldataRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Calldata) > 0 {
		i -= len(m.Calldata)
		copy(dAtA[i:], m.Calldata)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Calldata)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClientId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.BandParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BandPriceStates) > 0 {
		for _, e := range m.BandPriceStates {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BandOracleRequests) > 0 {
		for _, e := range m.BandOracleRequests {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.BandLatestClientId != 0 {
		n += 1 + sovGenesis(uint64(m.BandLatestClientId))
	}
	if len(m.CalldataRecords) > 0 {
		for _, e := range m.CalldataRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.BandLatestRequestId != 0 {
		n += 1 + sovGenesis(uint64(m.BandLatestRequestId))
	}
	l = m.BandOracleRequestParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *BandOracleRequestParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AskCount != 0 {
		n += 1 + sovGenesis(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovGenesis(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovGenesis(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovGenesis(uint64(m.ExecuteGas))
	}
	if m.MinSourceCount != 0 {
		n += 1 + sovGenesis(uint64(m.MinSourceCount))
	}
	return n
}

func (m *BandPriceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.ResolveTime != 0 {
		n += 1 + sovGenesis(uint64(m.ResolveTime))
	}
	if m.Request_ID != 0 {
		n += 1 + sovGenesis(uint64(m.Request_ID))
	}
	l = m.PriceState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PriceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	return n
}

func (m *CalldataRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovGenesis(uint64(m.ClientId))
	}
	l = len(m.Calldata)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BandParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandPriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BandPriceStates = append(m.BandPriceStates, &BandPriceState{})
			if err := m.BandPriceStates[len(m.BandPriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandOracleRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BandOracleRequests = append(m.BandOracleRequests, &BandOracleRequest{})
			if err := m.BandOracleRequests[len(m.BandOracleRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandLatestClientId", wireType)
			}
			m.BandLatestClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandLatestClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalldataRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalldataRecords = append(m.CalldataRecords, &CalldataRecord{})
			if err := m.CalldataRecords[len(m.CalldataRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandLatestRequestId", wireType)
			}
			m.BandLatestRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandLatestRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandOracleRequestParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BandOracleRequestParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BandOracleRequestParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandOracleRequestParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandOracleRequestParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSourceCount", wireType)
			}
			m.MinSourceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSourceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BandPriceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandPriceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandPriceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
			}
			m.ResolveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request_ID", wireType)
			}
			m.Request_ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Request_ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalldataRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalldataRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalldataRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calldata = append(m.Calldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Calldata == nil {
				m.Calldata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
