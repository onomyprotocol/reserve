// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/auction/v1/auction.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus enumerates the valid auction status.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines unknow auction status default is active.
	AuctionStatus_AUCTION_STATUS_UNSPECIFIED AuctionStatus = 0
	// AUCTION_STATUS_ACTIVE defines auction active status.
	AuctionStatus_AUCTION_STATUS_ACTIVE AuctionStatus = 1
	// AUCTION_STATUS_FINISHED defines auction finished reaching target goal.
	AuctionStatus_AUCTION_STATUS_FINISHED AuctionStatus = 2
	// AUCTION_STATUS_EXPIRED defines auction reach end time without reaching target goal.
	AuctionStatus_AUCTION_STATUS_EXPIRED AuctionStatus = 3
	// AUCTION_STATUS_OUT_OF_COLLATHERAL defines auction out of collatheral.
	AuctionStatus_AUCTION_STATUS_OUT_OF_COLLATHERAL AuctionStatus = 4
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_ACTIVE",
	2: "AUCTION_STATUS_FINISHED",
	3: "AUCTION_STATUS_EXPIRED",
	4: "AUCTION_STATUS_OUT_OF_COLLATHERAL",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED":        0,
	"AUCTION_STATUS_ACTIVE":             1,
	"AUCTION_STATUS_FINISHED":           2,
	"AUCTION_STATUS_EXPIRED":            3,
	"AUCTION_STATUS_OUT_OF_COLLATHERAL": 4,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{0}
}

// Auction struct
type Auction struct {
	// for simplicity, will use vault id that start the auction as auction id
	AuctionId uint64 `protobuf:"varint,3,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// starting price (currently only support usd stable token)
	InitialPrice string `protobuf:"bytes,4,opt,name=initial_price,json=initialPrice,proto3" json:"initial_price,omitempty"`
	// items defines liquidate assets
	Item types.Coin `protobuf:"bytes,5,opt,name=item,proto3" json:"item"`
	// current_rate defines the rate compare with the initial price
	CurrentRate string `protobuf:"bytes,6,opt,name=current_rate,json=currentRate,proto3" json:"current_rate,omitempty"`
	// last_discount_time defines the last time a discount has been apply
	LastDiscountTime time.Time  `protobuf:"bytes,7,opt,name=last_discount_time,json=lastDiscountTime,proto3,stdtime" json:"last_discount_time"`
	TokenRaised      types.Coin `protobuf:"bytes,8,opt,name=token_raised,json=tokenRaised,proto3" json:"token_raised"`
	// status defines auction current status
	Status AuctionStatus `protobuf:"varint,9,opt,name=status,proto3,enum=reserve.auction.v1.AuctionStatus" json:"status,omitempty"`
	// target_goal defines the debt the auction is trying to recover
	TargetGoal types.Coin `protobuf:"bytes,10,opt,name=target_goal,json=targetGoal,proto3" json:"target_goal"`
	// vault_id defines id of auction vault
	VaultId uint64 `protobuf:"varint,11,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Auction) GetInitialPrice() string {
	if m != nil {
		return m.InitialPrice
	}
	return ""
}

func (m *Auction) GetItem() types.Coin {
	if m != nil {
		return m.Item
	}
	return types.Coin{}
}

func (m *Auction) GetCurrentRate() string {
	if m != nil {
		return m.CurrentRate
	}
	return ""
}

func (m *Auction) GetLastDiscountTime() time.Time {
	if m != nil {
		return m.LastDiscountTime
	}
	return time.Time{}
}

func (m *Auction) GetTokenRaised() types.Coin {
	if m != nil {
		return m.TokenRaised
	}
	return types.Coin{}
}

func (m *Auction) GetStatus() AuctionStatus {
	if m != nil {
		return m.Status
	}
	return AuctionStatus_AUCTION_STATUS_UNSPECIFIED
}

func (m *Auction) GetTargetGoal() types.Coin {
	if m != nil {
		return m.TargetGoal
	}
	return types.Coin{}
}

func (m *Auction) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

// Bid defines bid entry
type Bid struct {
	// id of bid
	BidId uint64 `protobuf:"varint,1,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	// bidder address
	Bidder string `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// bidding amount
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	// recive_price defines the price that the bid is willing to pay
	RecivePrice string `protobuf:"bytes,4,opt,name=recive_price,json=recivePrice,proto3" json:"recive_price,omitempty"`
	// maxReceive maximum receive-able amount
	MaxReceive types.Coin `protobuf:"bytes,5,opt,name=max_receive,json=maxReceive,proto3" json:"max_receive"`
	IsHandle   bool       `protobuf:"varint,6,opt,name=is_handle,json=isHandle,proto3" json:"is_handle,omitempty"`
	// index in auction bid_queue
	Index uint64 `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{1}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Bid) GetRecivePrice() string {
	if m != nil {
		return m.RecivePrice
	}
	return ""
}

func (m *Bid) GetMaxReceive() types.Coin {
	if m != nil {
		return m.MaxReceive
	}
	return types.Coin{}
}

func (m *Bid) GetIsHandle() bool {
	if m != nil {
		return m.IsHandle
	}
	return false
}

func (m *Bid) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// BidQueue defines a list of bid entries for a single auction sorted by insertion time
type BidQueue struct {
	// bidder address
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// array of bid entries with bidder address
	Bids []*Bid `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (m *BidQueue) Reset()         { *m = BidQueue{} }
func (m *BidQueue) String() string { return proto.CompactTextString(m) }
func (*BidQueue) ProtoMessage()    {}
func (*BidQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{2}
}
func (m *BidQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidQueue.Merge(m, src)
}
func (m *BidQueue) XXX_Size() int {
	return m.Size()
}
func (m *BidQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_BidQueue.DiscardUnknown(m)
}

var xxx_messageInfo_BidQueue proto.InternalMessageInfo

func (m *BidQueue) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *BidQueue) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

// Bids defines a list of bid entries
type Bids struct {
	// array of bid entries with bidder address
	Bids []*Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (m *Bids) Reset()         { *m = Bids{} }
func (m *Bids) String() string { return proto.CompactTextString(m) }
func (*Bids) ProtoMessage()    {}
func (*Bids) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{3}
}
func (m *Bids) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bids.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bids.Merge(m, src)
}
func (m *Bids) XXX_Size() int {
	return m.Size()
}
func (m *Bids) XXX_DiscardUnknown() {
	xxx_messageInfo_Bids.DiscardUnknown(m)
}

var xxx_messageInfo_Bids proto.InternalMessageInfo

func (m *Bids) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func init() {
	proto.RegisterEnum("reserve.auction.v1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*Auction)(nil), "reserve.auction.v1.Auction")
	proto.RegisterType((*Bid)(nil), "reserve.auction.v1.Bid")
	proto.RegisterType((*BidQueue)(nil), "reserve.auction.v1.BidQueue")
	proto.RegisterType((*Bids)(nil), "reserve.auction.v1.Bids")
}

func init() { proto.RegisterFile("reserve/auction/v1/auction.proto", fileDescriptor_8758264ed04201a2) }

var fileDescriptor_8758264ed04201a2 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x6f, 0xdb, 0x36,
	0x14, 0xc7, 0xad, 0x44, 0x71, 0x6c, 0x2a, 0x29, 0x3c, 0x22, 0x5d, 0x15, 0x17, 0x53, 0xdc, 0x00,
	0x03, 0x8c, 0x0e, 0x95, 0xea, 0xe4, 0xb2, 0x01, 0xbb, 0x58, 0xb6, 0xd2, 0x68, 0x08, 0xe2, 0x4c,
	0xb6, 0xbb, 0x61, 0x17, 0x81, 0x12, 0x39, 0x95, 0x98, 0x24, 0x1a, 0x22, 0x65, 0xb8, 0x1f, 0x61,
	0xb7, 0x7e, 0x8c, 0x61, 0xa7, 0x1d, 0x7a, 0xd9, 0x37, 0xe8, 0xb1, 0xe8, 0x69, 0xa7, 0x6d, 0x48,
	0x0e, 0xfb, 0x1a, 0x83, 0x28, 0xba, 0xc0, 0xbc, 0xa2, 0x48, 0x2e, 0x06, 0x1f, 0xdf, 0xef, 0xaf,
	0xf7, 0xfc, 0xf8, 0x27, 0x41, 0xaf, 0x20, 0x9c, 0x14, 0x4b, 0xe2, 0xa0, 0x32, 0x16, 0x94, 0xe5,
	0xce, 0x72, 0xb0, 0x5e, 0xda, 0x8b, 0x82, 0x09, 0x06, 0xa1, 0x22, 0xec, 0xf5, 0xf6, 0x72, 0xd0,
	0xfd, 0x04, 0x65, 0x34, 0x67, 0x8e, 0xfc, 0xad, 0xb1, 0xee, 0x41, 0xc2, 0x12, 0x26, 0x97, 0x4e,
	0xb5, 0x52, 0xbb, 0x87, 0x31, 0xe3, 0x19, 0xe3, 0x61, 0x9d, 0xa8, 0x03, 0x95, 0x3a, 0x4a, 0x18,
	0x4b, 0x52, 0xe2, 0xc8, 0x28, 0x2a, 0x7f, 0x74, 0x04, 0xcd, 0x08, 0x17, 0x28, 0x5b, 0x28, 0xc0,
	0xaa, 0x71, 0x27, 0x42, 0x9c, 0x38, 0xcb, 0x41, 0x44, 0x04, 0x1a, 0x38, 0x31, 0xa3, 0xaa, 0xb1,
	0xe3, 0x9f, 0x75, 0xb0, 0x3b, 0xac, 0x7b, 0x82, 0x9f, 0x01, 0xa0, 0xda, 0x0b, 0x29, 0x36, 0xb7,
	0x7b, 0x5a, 0x5f, 0x0f, 0xda, 0x6a, 0xc7, 0xc7, 0xf0, 0x14, 0xec, 0xd3, 0x9c, 0x0a, 0x8a, 0xd2,
	0x70, 0x51, 0xd0, 0x98, 0x98, 0x7a, 0x4f, 0xeb, 0xb7, 0xdd, 0x7b, 0xef, 0x5e, 0x3f, 0x01, 0xaa,
	0xa9, 0x31, 0x89, 0x83, 0x3d, 0x05, 0x5d, 0x55, 0x0c, 0xfc, 0x12, 0xe8, 0x54, 0x90, 0xcc, 0xdc,
	0xe9, 0x69, 0x7d, 0xe3, 0xe4, 0xd0, 0x56, 0x60, 0xd5, 0x8e, 0xad, 0xda, 0xb1, 0x47, 0x8c, 0xe6,
	0x6e, 0xfb, 0xcd, 0x9f, 0x47, 0x8d, 0x5f, 0xfe, 0xf9, 0xed, 0xb1, 0x16, 0x48, 0x05, 0x1c, 0x80,
	0xbd, 0xb8, 0x2c, 0x0a, 0x92, 0x8b, 0xb0, 0x40, 0x82, 0x98, 0xcd, 0x0f, 0x56, 0x33, 0x14, 0x13,
	0x20, 0x41, 0xe0, 0x77, 0x00, 0xa6, 0x88, 0x8b, 0x10, 0x53, 0x1e, 0xb3, 0x32, 0x17, 0x61, 0x35,
	0x0d, 0x73, 0x57, 0x96, 0xee, 0xda, 0xf5, 0xa8, 0xec, 0xf5, 0xa8, 0xec, 0xd9, 0x7a, 0x54, 0xee,
	0x7e, 0x55, 0xfb, 0xd5, 0x5f, 0x47, 0x5a, 0x5d, 0xbf, 0x53, 0x7d, 0x64, 0xac, 0xbe, 0x51, 0x51,
	0xf0, 0x19, 0xd8, 0x13, 0xec, 0x27, 0x92, 0x87, 0x05, 0xa2, 0x9c, 0x60, 0xb3, 0x75, 0x87, 0x7f,
	0x63, 0x48, 0x65, 0x20, 0x85, 0xf0, 0x2b, 0xd0, 0xe4, 0x02, 0x89, 0x92, 0x9b, 0xed, 0x9e, 0xd6,
	0xbf, 0x77, 0xf2, 0xc8, 0xfe, 0xbf, 0x31, 0x6c, 0x75, 0x1e, 0x53, 0x09, 0x06, 0x4a, 0x00, 0x3d,
	0x60, 0x08, 0x54, 0x24, 0x44, 0x84, 0x09, 0x43, 0xa9, 0x09, 0xee, 0xd0, 0x02, 0xa8, 0x85, 0xcf,
	0x18, 0x4a, 0xe1, 0x21, 0x68, 0x2d, 0x51, 0x99, 0x8a, 0xea, 0x88, 0x0d, 0x79, 0xc4, 0xbb, 0x32,
	0xf6, 0xf1, 0xf1, 0xef, 0x5b, 0x60, 0xdb, 0xa5, 0x18, 0xde, 0x07, 0xcd, 0x88, 0xe2, 0x0a, 0xd0,
	0x24, 0xb0, 0x13, 0x51, 0xec, 0x63, 0xf8, 0x54, 0x6e, 0x63, 0x52, 0x98, 0x5b, 0xf2, 0x28, 0xcc,
	0x77, 0xaf, 0x9f, 0x1c, 0xa8, 0xf2, 0x43, 0x8c, 0x0b, 0xc2, 0xf9, 0x54, 0x14, 0x34, 0x4f, 0x02,
	0xc5, 0xc1, 0xaf, 0x41, 0x13, 0x65, 0xd5, 0x10, 0xa5, 0x99, 0x6e, 0xdb, 0xad, 0xd2, 0x54, 0x06,
	0x28, 0x48, 0x4c, 0x97, 0xe4, 0xa3, 0x76, 0x33, 0x6a, 0xa6, 0x76, 0x9b, 0x07, 0x8c, 0x0c, 0xad,
	0xc2, 0x82, 0xc4, 0x84, 0x2e, 0xc9, 0x9d, 0x4c, 0x07, 0x32, 0xb4, 0x0a, 0x6a, 0x1d, 0x7c, 0x08,
	0xda, 0x94, 0x87, 0x2f, 0x50, 0x8e, 0xd3, 0xda, 0x77, 0xad, 0xa0, 0x45, 0xf9, 0xb9, 0x8c, 0xe1,
	0x01, 0xd8, 0xa1, 0x39, 0x26, 0x2b, 0xe9, 0x2b, 0x3d, 0xa8, 0x83, 0xe3, 0xe7, 0xa0, 0xe5, 0x52,
	0xfc, 0x6d, 0x49, 0x4a, 0xb2, 0x71, 0x8f, 0xb4, 0xcd, 0x7b, 0xf4, 0x05, 0xd0, 0x23, 0x8a, 0xb9,
	0xb9, 0xd5, 0xdb, 0xee, 0x1b, 0x27, 0x0f, 0x3e, 0xe4, 0x00, 0x97, 0xe2, 0x40, 0x42, 0xc7, 0xa7,
	0x40, 0x77, 0x29, 0xe6, 0xef, 0x45, 0xda, 0x2d, 0x44, 0x8f, 0x7f, 0xd5, 0xc0, 0xfe, 0x7f, 0x4c,
	0x04, 0x2d, 0xd0, 0x1d, 0xce, 0x47, 0x33, 0x7f, 0x72, 0x19, 0x4e, 0x67, 0xc3, 0xd9, 0x7c, 0x1a,
	0xce, 0x2f, 0xa7, 0x57, 0xde, 0xc8, 0x3f, 0xf3, 0xbd, 0x71, 0xa7, 0x01, 0x0f, 0xc1, 0xfd, 0x8d,
	0xfc, 0x70, 0x34, 0xf3, 0x9f, 0x7b, 0x1d, 0x0d, 0x3e, 0x04, 0x0f, 0x36, 0x52, 0x67, 0xfe, 0xa5,
	0x3f, 0x3d, 0xf7, 0xc6, 0x9d, 0x2d, 0xd8, 0x05, 0x9f, 0x6e, 0x24, 0xbd, 0xef, 0xaf, 0xfc, 0xc0,
	0x1b, 0x77, 0xb6, 0xe1, 0xe7, 0xe0, 0xd1, 0x46, 0x6e, 0x32, 0x9f, 0x85, 0x93, 0xb3, 0x70, 0x34,
	0xb9, 0xb8, 0x18, 0xce, 0xce, 0xbd, 0x60, 0x78, 0xd1, 0xd1, 0xdd, 0x6f, 0xde, 0x5c, 0x5b, 0xda,
	0xdb, 0x6b, 0x4b, 0xfb, 0xfb, 0xda, 0xd2, 0x5e, 0xdd, 0x58, 0x8d, 0xb7, 0x37, 0x56, 0xe3, 0x8f,
	0x1b, 0xab, 0xf1, 0xc3, 0xd3, 0x84, 0x8a, 0x17, 0x65, 0x64, 0xc7, 0x2c, 0x73, 0x58, 0xce, 0xb2,
	0x97, 0xf2, 0xea, 0xc6, 0x2c, 0x75, 0xd6, 0xef, 0xed, 0xea, 0xfd, 0x8b, 0x2b, 0x5e, 0x2e, 0x08,
	0x8f, 0x9a, 0x92, 0x38, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x36, 0xe4, 0x60, 0x5e, 0x91, 0x05,
	0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.TargetGoal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Status != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TokenRaised.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastDiscountTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastDiscountTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAuction(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if len(m.CurrentRate) > 0 {
		i -= len(m.CurrentRate)
		copy(dAtA[i:], m.CurrentRate)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.CurrentRate)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.InitialPrice) > 0 {
		i -= len(m.InitialPrice)
		copy(dAtA[i:], m.InitialPrice)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.InitialPrice)))
		i--
		dAtA[i] = 0x22
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x38
	}
	if m.IsHandle {
		i--
		if m.IsHandle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.MaxReceive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RecivePrice) > 0 {
		i -= len(m.RecivePrice)
		copy(dAtA[i:], m.RecivePrice)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.RecivePrice)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.BidId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BidQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bids) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bids) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bids) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = len(m.InitialPrice)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Item.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.CurrentRate)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastDiscountTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.TokenRaised.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.Status != 0 {
		n += 1 + sovAuction(uint64(m.Status))
	}
	l = m.TargetGoal.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.VaultId != 0 {
		n += 1 + sovAuction(uint64(m.VaultId))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidId != 0 {
		n += 1 + sovAuction(uint64(m.BidId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.RecivePrice)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.MaxReceive.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.IsHandle {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovAuction(uint64(m.Index))
	}
	return n
}

func (m *BidQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *Bids) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDiscountTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastDiscountTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenRaised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenRaised.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGoal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetGoal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecivePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecivePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReceive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxReceive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHandle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHandle = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bids) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bids: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bids: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
