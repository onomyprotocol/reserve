// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/psm/v1/psm.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StablecoinInfo struct {
	// stablecoin name
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// limit total stablecoin
	LimitTotal cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=limit_total,json=limitTotal,proto3,customtype=cosmossdk.io/math.Int" json:"limit_total"`
	// stablecoin to nom exchange fee, fee_in when 1 stablecoin = 1nomUSD
	FeeIn cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=fee_in,json=feeIn,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee_in"`
	// nom to stablecoin exchange fee, fee_out when 1 stablecoin = 1nomUSD
	FeeOut cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fee_out,json=feeOut,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee_out"`
	// amount of stablecoins locked in exchange for nomUSD
	TotalStablecoinLock cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=total_stablecoin_lock,json=totalStablecoinLock,proto3,customtype=cosmossdk.io/math.Int" json:"total_stablecoin_lock"`
	// maximum fee for when either fee = 0
	FeeMaxStablecoin cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=fee_max_stablecoin,json=feeMaxStablecoin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee_max_stablecoin"`
	Symbol           string                      `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *StablecoinInfo) Reset()         { *m = StablecoinInfo{} }
func (m *StablecoinInfo) String() string { return proto.CompactTextString(m) }
func (*StablecoinInfo) ProtoMessage()    {}
func (*StablecoinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_59572214fa05fb2f, []int{0}
}
func (m *StablecoinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StablecoinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StablecoinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StablecoinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StablecoinInfo.Merge(m, src)
}
func (m *StablecoinInfo) XXX_Size() int {
	return m.Size()
}
func (m *StablecoinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StablecoinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StablecoinInfo proto.InternalMessageInfo

func (m *StablecoinInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *StablecoinInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func init() {
	proto.RegisterType((*StablecoinInfo)(nil), "reserve.psm.v1.StablecoinInfo")
}

func init() { proto.RegisterFile("reserve/psm/v1/psm.proto", fileDescriptor_59572214fa05fb2f) }

var fileDescriptor_59572214fa05fb2f = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0x6d, 0xc2, 0x39, 0x62, 0x41, 0x11, 0x2c, 0x09, 0x5a, 0x82, 0xe4, 0x44, 0x54, 0x11,
	0x02, 0x2f, 0x16, 0x6f, 0x10, 0x45, 0x08, 0xa3, 0x20, 0xc4, 0x41, 0x45, 0x63, 0xad, 0xf7, 0xc6,
	0x8e, 0x75, 0xde, 0x9d, 0xd3, 0xed, 0x9e, 0x75, 0x7e, 0x0b, 0x1e, 0x83, 0x92, 0x82, 0x87, 0x48,
	0x19, 0x51, 0x21, 0x8a, 0x08, 0xdd, 0x15, 0x74, 0x3c, 0x03, 0xda, 0xb5, 0x21, 0x91, 0xe8, 0xae,
	0xb1, 0x3d, 0xf3, 0x8f, 0xbe, 0xf9, 0x67, 0x3c, 0x84, 0xcd, 0xc1, 0xc0, 0xbc, 0x05, 0x3e, 0x33,
	0x8a, 0xb7, 0xa9, 0x7b, 0x25, 0xb3, 0x39, 0x5a, 0xa4, 0x3b, 0x83, 0x92, 0xb8, 0x54, 0x9b, 0xee,
	0xef, 0x56, 0x58, 0xa1, 0x97, 0xb8, 0xfb, 0xea, 0xab, 0xf6, 0x1f, 0x4a, 0x34, 0x0a, 0x4d, 0xde,
	0x0b, 0x7d, 0x30, 0x48, 0xf7, 0x84, 0xaa, 0x35, 0x72, 0xff, 0x1c, 0x52, 0x71, 0x5f, 0xc0, 0x0b,
	0x61, 0x80, 0xb7, 0x69, 0x01, 0x56, 0xa4, 0x5c, 0x62, 0xad, 0x7b, 0xfd, 0xf1, 0xef, 0x2d, 0xb2,
	0xf3, 0xde, 0x8a, 0xa2, 0x01, 0x97, 0xcc, 0x74, 0x89, 0x74, 0x97, 0x8c, 0x26, 0xa0, 0x51, 0xb1,
	0xf0, 0x30, 0x3c, 0xba, 0x35, 0xee, 0x03, 0xfa, 0x8e, 0xdc, 0x6e, 0x6a, 0x55, 0xdb, 0xdc, 0xa2,
	0x15, 0x0d, 0xbb, 0x71, 0x18, 0x1e, 0xdd, 0x39, 0x7e, 0x7e, 0x7e, 0x79, 0x10, 0xfc, 0xb8, 0x3c,
	0xd8, 0xeb, 0xbb, 0x98, 0xc9, 0x34, 0xa9, 0x91, 0x2b, 0x61, 0xcf, 0x92, 0x4c, 0xdb, 0x6f, 0x5f,
	0x9f, 0x91, 0xc1, 0x5f, 0xa6, 0xed, 0xe7, 0x5f, 0x5f, 0x9e, 0x84, 0x63, 0xe2, 0x21, 0x1f, 0x1c,
	0x83, 0xbe, 0x22, 0x51, 0x09, 0x90, 0xd7, 0x9a, 0x6d, 0x79, 0x5a, 0x3a, 0xd0, 0x1e, 0xfd, 0x4f,
	0x3b, 0x85, 0x4a, 0xc8, 0xee, 0x04, 0xe4, 0x35, 0xe6, 0x09, 0xc8, 0xf1, 0xa8, 0x04, 0xc8, 0x34,
	0x7d, 0x4d, 0xb6, 0x1d, 0x09, 0x17, 0x96, 0xdd, 0xdc, 0x14, 0xe5, 0xbc, 0xbc, 0x5d, 0x58, 0x3a,
	0x21, 0x7b, 0x7e, 0xc4, 0xdc, 0xfc, 0x5b, 0x4b, 0xde, 0xa0, 0x9c, 0xb2, 0xd1, 0x86, 0x23, 0xdf,
	0xf7, 0xb8, 0xab, 0x25, 0x9f, 0xa2, 0x9c, 0xd2, 0x9c, 0x50, 0xe7, 0x58, 0x89, 0xe5, 0xb5, 0x3e,
	0x2c, 0xda, 0xd4, 0xfc, 0xdd, 0x12, 0xe0, 0x8d, 0x58, 0x5e, 0x35, 0xa1, 0x0f, 0x48, 0x64, 0x3a,
	0x55, 0x60, 0xc3, 0xb6, 0xfd, 0x6f, 0x1c, 0xa2, 0xe3, 0x97, 0xe7, 0xab, 0x38, 0xbc, 0x58, 0xc5,
	0xe1, 0xcf, 0x55, 0x1c, 0x7e, 0x5a, 0xc7, 0xc1, 0xc5, 0x3a, 0x0e, 0xbe, 0xaf, 0xe3, 0xe0, 0xe3,
	0xd3, 0xaa, 0xb6, 0x67, 0x8b, 0x22, 0x91, 0xa8, 0x38, 0x6a, 0x54, 0x9d, 0xbf, 0x10, 0x89, 0x0d,
	0xff, 0x7b, 0xb1, 0x4b, 0x7f, 0xb3, 0xb6, 0x9b, 0x81, 0x29, 0x22, 0xaf, 0xbe, 0xf8, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x54, 0xbe, 0x3e, 0xf4, 0xcf, 0x02, 0x00, 0x00,
}

func (m *StablecoinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StablecoinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StablecoinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintPsm(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.FeeMaxStablecoin.Size()
		i -= size
		if _, err := m.FeeMaxStablecoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalStablecoinLock.Size()
		i -= size
		if _, err := m.TotalStablecoinLock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FeeOut.Size()
		i -= size
		if _, err := m.FeeOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeeIn.Size()
		i -= size
		if _, err := m.FeeIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LimitTotal.Size()
		i -= size
		if _, err := m.LimitTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPsm(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovPsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StablecoinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPsm(uint64(l))
	}
	l = m.LimitTotal.Size()
	n += 1 + l + sovPsm(uint64(l))
	l = m.FeeIn.Size()
	n += 1 + l + sovPsm(uint64(l))
	l = m.FeeOut.Size()
	n += 1 + l + sovPsm(uint64(l))
	l = m.TotalStablecoinLock.Size()
	n += 1 + l + sovPsm(uint64(l))
	l = m.FeeMaxStablecoin.Size()
	n += 1 + l + sovPsm(uint64(l))
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovPsm(uint64(l))
	}
	return n
}

func sovPsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPsm(x uint64) (n int) {
	return sovPsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StablecoinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StablecoinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StablecoinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitTotal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeIn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeOut", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStablecoinLock", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStablecoinLock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMaxStablecoin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeMaxStablecoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPsm = fmt.Errorf("proto: unexpected end of group")
)
